/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization by enforcing strict ownership on user profiles
 * and public read access to departmental reports. Data validation is relaxed to allow for rapid
 * prototyping and schema iteration.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Departmental reports are stored in top-level collections (e.g., `/pregger_reports/{docId}`).
 *
 * Key Security Decisions:
 * - User profiles are strictly owned by the authenticated user.
 * - Departmental reports are publicly readable but writable only by authenticated users. The assumption is that further logic in the application will filter the documents visible in the UI based on user role.
 * - Listing of users is explicitly denied to prevent unauthorized data enumeration.
 *
 * Denormalization for Authorization:
 * - No denormalization is explicitly used in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, ensuring only the authenticated user can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user creates their own profile with matching userId.
     * @allow (get, update, delete) - Authenticated user accesses their own profile.
     * @deny (create, get, update, delete) - Any other user tries to access this profile.
     * @deny (list) - Listing of users is not allowed.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages Pregger department reports, allowing public read but requiring authentication for writes.
     * @path /pregger_reports/{docId}
     * @allow (get, list) - Any user can read reports.
     * @allow (create, update, delete) - Only authenticated users can write reports.
     * @deny (create, update, delete) - Unauthenticated users cannot write reports.
     * @principle Allows public read with owner-only writes; authentication ensures accountability.
     */
    match /pregger_reports/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages Tapehead submissions, allowing public read but requiring authentication for writes.
     * @path /tapeheads_submissions/{docId}
     * @allow (get, list) - Any user can read submissions.
     * @allow (create, update, delete) - Only authenticated users can write submissions.
     * @deny (create, update, delete) - Unauthenticated users cannot write submissions.
     */
    match /tapeheads_submissions/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages Tapehead reviews, allowing public read but requiring authentication for writes.
     * @path /tapehead_reviews/{docId}
     * @allow (get, list) - Any user can read reviews.
     * @allow (create, update, delete) - Only authenticated users can write reviews.
     * @deny (create, update, delete) - Unauthenticated users cannot write reviews.
     */
    match /tapehead_reviews/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages Gantry department reports, allowing public read but requiring authentication for writes.
     * @path /gantry_reports/{docId}
     * @allow (get, list) - Any user can read reports.
     * @allow (create, update, delete) - Only authenticated users can write reports.
     * @deny (create, update, delete) - Unauthenticated users cannot write reports.
     */
    match /gantry_reports/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages Films department reports, allowing public read but requiring authentication for writes.
     * @path /films_reports/{docId}
     * @allow (get, list) - Any user can read reports.
     * @allow (create, update, delete) - Only authenticated users can write reports.
     * @deny (create, update, delete) - Unauthenticated users cannot write reports.
     */
    match /films_reports/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages Graphics department tasks, allowing public read but requiring authentication for writes.
     * @path /graphics_tasks/{docId}
     * @allow (get, list) - Any user can read tasks.
     * @allow (create, update, delete) - Only authenticated users can write tasks.
     * @deny (create, update, delete) - Unauthenticated users cannot write tasks.
     */
    match /graphics_tasks/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages QC inspection reports, allowing public read but requiring authentication for writes.
     * @path /qc_inspections/{docId}
     * @allow (get, list) - Any user can read reports.
     * @allow (create, update, delete) - Only authenticated users can write reports.
     * @deny (create, update, delete) - Unauthenticated users cannot write reports.
     */
    match /qc_inspections/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages analytics snapshots, allowing public read but requiring authentication for writes.
     * @path /analytics_snapshots/{docId}
     * @allow (get, list) - Any user can read snapshots.
     * @allow (create, update, delete) - Only authenticated users can write snapshots.
     * @deny (create, update, delete) - Unauthenticated users cannot write snapshots.
     */
    match /analytics_snapshots/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages sail status information, allowing public read but requiring authentication for writes.
     * @path /sail_status/{docId}
     * @allow (get, list) - Any user can read sail statuses.
     * @allow (create, update, delete) - Only authenticated users can write sail statuses.
     * @deny (create, update, delete) - Unauthenticated users cannot write sail statuses.
     */
    match /sail_status/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }

    /**
     * @description Manages OE job definitions, allowing public read but requiring authentication for writes.
     * @path /jobs/{docId}
     * @allow (get, list) - Any user can read job definitions.
     * @allow (create, update, delete) - Only authenticated users can write job definitions.
     * @deny (create, update, delete) - Unauthenticated users cannot write job definitions.
     */
    match /jobs/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn();
      allow delete: if isSignedIn();
    }
  }
}