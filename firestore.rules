/**
 * @file Firestore Security Rules
 * @core_philosophy This ruleset enforces a strict user-ownership model for user profiles and allows public read access to all other data collections. Write access to non-user collections is completely disabled.
 * @data_structure User profiles are stored under `/users/{userId}`. All other data collections are stored at the top level (e.g., `/pregger-reports/{docId}`).
 * @key_security_decisions User listing is explicitly denied to protect user privacy. Read-only access is granted to non-user collections.  Writes to non-user collection is denied.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile if the userId matches their auth.uid.
     * @allow (get, list) Authenticated user can read their own profile if the userId matches their auth.uid.
     * @allow (update) Authenticated user can update their own profile if the userId matches their auth.uid.
     * @allow (delete) Authenticated user can delete their own profile if the userId matches their auth.uid.
     * @deny (list) Listing all users is forbidden.
     * @deny (create) Creating a profile for another user is forbidden.
     * @deny (get) Reading another user's profile is forbidden.
     * @deny (update) Updating another user's profile is forbidden.
     * @deny (delete) Deleting another user's profile is forbidden.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email is string;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants read-only access to Pregger reports.
     * @path /pregger-reports/{docId}
     * @allow (get, list) Any authenticated user can read Pregger reports.
     * @deny (create, update, delete) No user can create, update, or delete Pregger reports.
     * @principle Limits access to read-only for public data.
     */
    match /pregger-reports/{docId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Grants read-only access to Tapehead submissions.
     * @path /tapeheads-submissions/{docId}
     * @allow (get, list) Any authenticated user can read Tapehead submissions.
     * @deny (create, update, delete) No user can create, update, or delete Tapehead submissions.
     * @principle Limits access to read-only for public data.
     */
    match /tapeheads-submissions/{docId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Grants read-only access to Tapehead reviews.
     * @path /tapehead-reviews/{docId}
     * @allow (get, list) Any authenticated user can read Tapehead reviews.
     * @deny (create, update, delete) No user can create, update, or delete Tapehead reviews.
     * @principle Limits access to read-only for public data.
     */
    match /tapehead-reviews/{docId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Grants read-only access to Gantry reports.
     * @path /gantry-reports/{docId}
     * @allow (get, list) Any authenticated user can read Gantry reports.
     * @deny (create, update, delete) No user can create, update, or delete Gantry reports.
     * @principle Limits access to read-only for public data.
     */
    match /gantry-reports/{docId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Grants read-only access to Films reports.
     * @path /films-reports/{docId}
     * @allow (get, list) Any authenticated user can read Films reports.
     * @deny (create, update, delete) No user can create, update, or delete Films reports.
     * @principle Limits access to read-only for public data.
     */
    match /films-reports/{docId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Grants read-only access to Graphics tasks.
     * @path /graphics-tasks/{docId}
     * @allow (get, list) Any authenticated user can read Graphics tasks.
     * @deny (create, update, delete) No user can create, update, or delete Graphics tasks.
     * @principle Limits access to read-only for public data.
     */
    match /graphics-tasks/{docId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Grants read-only access to QC inspections.
     * @path /qc-inspections/{docId}
     * @allow (get, list) Any authenticated user can read QC inspections.
     * @deny (create, update, delete) No user can create, update, or delete QC inspections.
     * @principle Limits access to read-only for public data.
     */
    match /qc-inspections/{docId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Grants read-only access to Analytics snapshots.
     * @path /analytics-snapshots/{docId}
     * @allow (get, list) Any authenticated user can read Analytics snapshots.
     * @deny (create, update, delete) No user can create, update, or delete Analytics snapshots.
     * @principle Limits access to read-only for public data.
     */
    match /analytics-snapshots/{docId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Grants read-only access to Sail status.
     * @path /sail-status/{docId}
     * @allow (get, list) Any authenticated user can read Sail status.
     * @deny (create, update, delete) No user can create, update, or delete Sail status.
     * @principle Limits access to read-only for public data.
     */
    match /sail-status/{docId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Grants read-only access to OE Jobs.
     * @path /jobs/{docId}
     * @allow (get, list) Any authenticated user can read OE Jobs.
     * @deny (create, update, delete) No user can create, update, or delete OE Jobs.
     * @principle Limits access to read-only for public data.
     */
    match /jobs/{docId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    // Helper function to determine if the user is the owner of the document and the document exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}