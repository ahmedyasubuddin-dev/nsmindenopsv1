/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing a strict, role-based access control model.
 * Each collection is secured based on its intended use case, with clear distinctions between public read access and owner-only write access.
 *
 * Data Structure:
 * The Firestore database contains a mix of user-specific data (under /users/{userId}) and
 * shared operational data (reports, tasks, inspections).
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - Read-only collections are explicitly marked as such.
 * - The default security posture is strict: all access must be explicitly allowed.
 *
 * Denormalization for Authorization:
 * No denormalization strategy is required based on the current data structure and access patterns.
 * However, for the "Public Read with Owner-Only Writes" pattern to be effective, an ownership field
 * (e.g., `authorId`, `ownerId`) is expected within documents in collections like `qc_inspections`.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles, allowing only the owner to read and write.
     * @path /users/{userId}
     * @allow (read, write) User 'ReSdY1OX2Yb86CiBNNHWfDDOYPd2' can access their own profile.
     * @deny (read, write) User 'AnotherUserId' cannot access User 'ReSdY1OX2Yb86CiBNNHWfDDOYPd2' profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false; // User listing is not permitted.
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects Pregger reports, allowing anyone to read, but only specific users to create, update or delete
     * @path /pregger-reports/{docId}
     * @allow (read) Any signed-in user can read Pregger reports.
     *  @deny (create, update, delete) Any user can not modify the Pregger reports.
     * @principle Enforces document ownership for writes.
     */
    match /pregger-reports/{docId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects Tapehead submissions, allowing anyone to read, but only specific users to create, update or delete
     * @path /tapeheads-submissions/{docId}
     * @allow (read) Any signed-in user can read Tapehead submissions.
     * @deny (create, update, delete) Any user can not modify the Tapehead submissions.
     * @principle Enforces document ownership for writes.
     */
    match /tapeheads-submissions/{docId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects Tapehead reviews, allowing anyone to read, but only specific users to create, update or delete
     * @path /tapehead-reviews/{docId}
     * @allow (read) Any signed-in user can read Tapehead reviews.
     * @deny (create, update, delete) Any user can not modify the Tapehead reviews.
     * @principle Enforces document ownership for writes.
     */
    match /tapehead-reviews/{docId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects Gantry reports, allowing anyone to read, but only specific users to create, update or delete
     * @path /gantry-reports/{docId}
     * @allow (read) Any signed-in user can read Gantry reports.
     * @deny (create, update, delete) Any user can not modify the Gantry reports.
     * @principle Enforces document ownership for writes.
     */
    match /gantry-reports/{docId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects Films reports, allowing anyone to read, but only specific users to create, update or delete
     * @path /films-reports/{docId}
     * @allow (read) Any signed-in user can read Films reports.
     * @deny (create, update, delete) Any user can not modify the Films reports.
     * @principle Enforces document ownership for writes.
     */
    match /films-reports/{docId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects Graphics tasks, allowing anyone to read, but only specific users to create, update or delete
     * @path /graphics-tasks/{docId}
     * @allow (read) Any signed-in user can read Graphics tasks.
     * @deny (create, update, delete) Any user can not modify the Graphics tasks.
     * @principle Enforces document ownership for writes.
     */
    match /graphics-tasks/{docId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects QC inspection reports, allowing anyone to read, but only specific users to create, update or delete
     * @path /qc-inspections/{docId}
     * @allow (list) Any signed-in user can list QC inspection reports.
     * @deny (create, update, delete) Any user can not modify the QC inspection reports.
     * @principle Enforces document ownership for writes.
     */
    match /qc-inspections/{docId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects Analytics Snapshots, allowing anyone to read, but only specific users to create, update or delete
     * @path /analytics-snapshots/{docId}
     * @allow (read) Any signed-in user can read Analytics Snapshots.
     * @deny (create, update, delete) Any user can not modify the Analytics Snapshots.
     * @principle Enforces document ownership for writes.
     */
    match /analytics-snapshots/{docId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects Sail Status documents, allowing anyone to read, but only specific users to create, update or delete
     * @path /sail-status/{docId}
     * @allow (read) Any signed-in user can read Sail Status documents.
     * @deny (create, update, delete) Any user can not modify the Sail Status documents.
     * @principle Enforces document ownership for writes.
     */
    match /sail-status/{docId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Protects OE Job definitions, allowing anyone to read, but only specific users to create, update or delete
     * @path /jobs/{docId}
     * @allow (read) Any signed-in user can read OE Job definitions.
     * @deny (create, update, delete) Any user can not modify the OE Job definitions.
     * @principle Enforces document ownership for writes.
     */
    match /jobs/{docId} {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
    }
  }
}