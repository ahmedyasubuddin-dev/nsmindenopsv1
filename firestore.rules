/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes rapid prototyping by focusing on authorization and omitting data validation.
 * It enforces user-based ownership for user profiles and allows public read access for other collections
 * while restricting writes to authenticated users.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile information, secured with owner-only access.
 * - All other top-level collections: Assume public read access with restricted writes.
 *
 * Key Security Decisions:
 * - User listing is disabled to prevent unauthorized information gathering.
 * - Public read access is granted to non-user-specific data to simplify initial development.
 * - Strict ownership is enforced for user profiles.
 *
 * Denormalization for Authorization:
 *  N/A - No denormalization needed in this simplified model.
 *
 * Structural Segregation:
 *  N/A - No explicit segregation of public/private data within collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants owner-only access to user profiles.
     * @path /databases/{database}/documents/users/{userId}
     * @allow (create) User with ID "gl0dR68ptCVebE5a8IOuk8YjkzI2" can create their own profile.
     * @deny (create) User with ID "gl0dR68ptCVebE5a8IOuk8YjkzI2" cannot create a profile for a different user.
     * @allow (get) User with ID "gl0dR68ptCVebE5a8IOuk8YjkzI2" can read their own profile.
     * @deny (get) User with ID "gl0dR68ptCVebE5a8IOuk8YjkzI2" cannot read a different user's profile.
     * @allow (update) User with ID "gl0dR68ptCVebE5a8IOuk8YjkzI2" can update their own profile.
     * @deny (update) User with ID "gl0dR68ptCVebE5a8IOuk8YjkzI2" cannot update a different user's profile.
     * @allow (delete) User with ID "gl0dR68ptCVebE5a8IOuk8YjkzI2" can delete their own profile.
     * @deny (delete) User with ID "gl0dR68ptCVebE5a8IOuk8YjkzI2" cannot delete a different user's profile.
     * @deny (list) No one can list all user profiles.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Grants public read access to Pregger reports and restricts write access to authenticated users.
     * @path /databases/{database}/documents/pregger_reports/{docId}
     * @allow (get) Any user can read a Pregger report.
     * @allow (list) Any user can list Pregger reports.
     * @allow (create) Authenticated user can create a Pregger report.
     * @deny (create) Unauthenticated user cannot create a Pregger report.
     * @deny (update) No unauthenticated user can update a Pregger report.
     * @deny (delete) No unauthenticated user can delete a Pregger report.
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /pregger_reports/{docId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants public read access to Tapehead entries and restricts write access to authenticated users.
     * @path /databases/{database}/documents/tapeheads_submissions/{docId}
     * @allow (get) Any user can read a Tapehead entry.
     * @allow (list) Any user can list Tapehead entries.
     * @allow (create) Authenticated user can create a Tapehead entry.
     * @deny (create) Unauthenticated user cannot create a Tapehead entry.
     * @deny (update) No unauthenticated user can update a Tapehead entry.
     * @deny (delete) No unauthenticated user can delete a Tapehead entry.
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /tapeheads_submissions/{docId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants public read access to Tapehead reviews and restricts write access to authenticated users.
     * @path /databases/{database}/documents/tapehead_reviews/{docId}
     * @allow (get) Any user can read a Tapehead review.
     * @allow (list) Any user can list Tapehead reviews.
     * @allow (create) Authenticated user can create a Tapehead review.
     * @deny (create) Unauthenticated user cannot create a Tapehead review.
     * @deny (update) No unauthenticated user can update a Tapehead review.
     * @deny (delete) No unauthenticated user can delete a Tapehead review.
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /tapehead_reviews/{docId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants public read access to Gantry reports and restricts write access to authenticated users.
     * @path /databases/{database}/documents/gantry_reports/{docId}
     * @allow (get) Any user can read a Gantry report.
     * @allow (list) Any user can list Gantry reports.
     * @allow (create) Authenticated user can create a Gantry report.
     * @deny (create) Unauthenticated user cannot create a Gantry report.
     * @deny (update) No unauthenticated user can update a Gantry report.
     * @deny (delete) No unauthenticated user can delete a Gantry report.
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /gantry_reports/{docId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants public read access to Films reports and restricts write access to authenticated users.
     * @path /databases/{database}/documents/films_reports/{docId}
     * @allow (get) Any user can read a Films report.
     * @allow (list) Any user can list Films reports.
     * @allow (create) Authenticated user can create a Films report.
     * @deny (create) Unauthenticated user cannot create a Films report.
     * @deny (update) No unauthenticated user can update a Films report.
     * @deny (delete) No unauthenticated user can delete a Films report.
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /films_reports/{docId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants public read access to Graphics tasks and restricts write access to authenticated users.
     * @path /databases/{database}/documents/graphics_tasks/{docId}
     * @allow (get) Any user can read a Graphics task.
     * @allow (list) Any user can list Graphics tasks.
     * @allow (create) Authenticated user can create a Graphics task.
     * @deny (create) Unauthenticated user cannot create a Graphics task.
     * @deny (update) No unauthenticated user can update a Graphics task.
     * @deny (delete) No unauthenticated user can delete a Graphics task.
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /graphics_tasks/{docId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants public read access to QC inspections and restricts write access to authenticated users.
     * @path /databases/{database}/documents/qc_inspections/{docId}
     * @allow (get) Any user can read a QC inspection.
     * @allow (list) Any user can list QC inspections.
     * @allow (create) Authenticated user can create a QC inspection.
     * @deny (create) Unauthenticated user cannot create a QC inspection.
     * @deny (update) No unauthenticated user can update a QC inspection.
     * @deny (delete) No unauthenticated user can delete a QC inspection.
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /qc_inspections/{docId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants public read access to Analytics snapshots and restricts write access to authenticated users.
     * @path /databases/{database}/documents/analytics_snapshots/{docId}
     * @allow (get) Any user can read an Analytics snapshot.
     * @allow (list) Any user can list Analytics snapshots.
     * @allow (create) Authenticated user can create an Analytics snapshot.
     * @deny (create) Unauthenticated user cannot create an Analytics snapshot.
     * @deny (update) No unauthenticated user can update an Analytics snapshot.
     * @deny (delete) No unauthenticated user can delete an Analytics snapshot.
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /analytics_snapshots/{docId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants public read access to Sail status entries and restricts write access to authenticated users.
     * @path /databases/{database}/documents/sail_status/{docId}
     * @allow (get) Any user can read a Sail status entry.
     * @allow (list) Any user can list Sail status entries.
     * @allow (create) Authenticated user can create a Sail status entry.
     * @deny (create) Unauthenticated user cannot create a Sail status entry.
     * @deny (update) No unauthenticated user can update a Sail status entry.
     * @deny (delete) No unauthenticated user can delete a Sail status entry.
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /sail_status/{docId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Grants public read access to OE Jobs and restricts write access to authenticated users.
     * @path /databases/{database}/documents/jobs/{docId}
     * @allow (get) Any user can read a OE Job.
     * @allow (list) Any user can list OE Jobs.
     * @allow (create) Authenticated user can create a OE Job.
     * @deny (create) Unauthenticated user cannot create a OE Job.
     * @deny (update) No unauthenticated user can update a OE Job.
     * @deny (delete) No unauthenticated user can delete a OE Job.
     * @principle Allows public reads, restricts writes to authenticated users.
     */
    match /jobs/{docId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the requesting user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the requesting user is the owner of the document and the document exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}