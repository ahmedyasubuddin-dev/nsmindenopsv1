rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, list, update, delete) User with matching UID can access their profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (get, list, update, delete) User cannot access another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to Pregger reports.
     * @path /pregger_reports/{docId}
     * @allow (get, list) Any authenticated user can read Pregger reports.
     * @deny (create, update, delete) No user can create, update, or delete Pregger reports through the client.
     * @principle Allows public read access but restricts write access.
     */
    match /pregger_reports/{docId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if isSignedIn();
        allow create, update, delete: if isSignedIn() == false;
    }

    /**
     * @description Controls access to Tapehead submissions.
     * @path /tapeheads_submissions/{docId}
     * @allow (get, list) Any authenticated user can read Tapehead submissions.
     * @deny (create, update, delete) No user can create, update, or delete Tapehead submissions through the client.
     * @principle Allows public read access but restricts write access.
     */
    match /tapeheads_submissions/{docId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if isSignedIn();
        allow create, update, delete: if isSignedIn() == false;
    }

    /**
     * @description Controls access to Tapehead reviews.
     * @path /tapehead_reviews/{docId}
     * @allow (get, list) Any authenticated user can read Tapehead reviews.
     * @deny (create, update, delete) No user can create, update, or delete Tapehead reviews through the client.
     * @principle Allows public read access but restricts write access.
     */
    match /tapehead_reviews/{docId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if isSignedIn();
        allow create, update, delete: if isSignedIn() == false;
    }

    /**
     * @description Controls access to Gantry reports.
     * @path /gantry_reports/{docId}
     * @allow (get, list) Any authenticated user can read Gantry reports.
     * @deny (create, update, delete) No user can create, update, or delete Gantry reports through the client.
     * @principle Allows public read access but restricts write access.
     */
    match /gantry_reports/{docId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if isSignedIn();
        allow create, update, delete: if isSignedIn() == false;
    }

    /**
     * @description Controls access to Films reports.
     * @path /films_reports/{docId}
     * @allow (get, list) Any authenticated user can read Films reports.
     * @deny (create, update, delete) No user can create, update, or delete Films reports through the client.
     * @principle Allows public read access but restricts write access.
     */
    match /films_reports/{docId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if isSignedIn();
        allow create, update, delete: if isSignedIn() == false;
    }

    /**
     * @description Controls access to Graphics tasks.
     * @path /graphics_tasks/{docId}
     * @allow (get, list) Any authenticated user can read Graphics tasks.
     * @deny (create, update, delete) No user can create, update, or delete Graphics tasks through the client.
     * @principle Allows public read access but restricts write access.
     */
    match /graphics_tasks/{docId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if isSignedIn();
        allow create, update, delete: if isSignedIn() == false;
    }

    /**
     * @description Controls access to QC inspections.
     * @path /qc_inspections/{docId}
     * @allow (get, list) Any authenticated user can read QC inspections.
     * @deny (create, update, delete) No user can create, update, or delete QC inspections through the client.
     * @principle Allows public read access but restricts write access.
     */
    match /qc_inspections/{docId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if isSignedIn();
        allow create, update, delete: if isSignedIn() == false;
    }

    /**
     * @description Controls access to Analytics snapshots.
     * @path /analytics_snapshots/{docId}
     * @allow (get, list) Any authenticated user can read Analytics snapshots.
     * @deny (create, update, delete) No user can create, update, or delete Analytics snapshots through the client.
     * @principle Allows public read access but restricts write access.
     */
    match /analytics_snapshots/{docId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if isSignedIn();
        allow create, update, delete: if isSignedIn() == false;
    }

    /**
     * @description Controls access to Sail status.
     * @path /sail_status/{docId}
     * @allow (get, list) Any authenticated user can read Sail status.
     * @deny (create, update, delete) No user can create, update, or delete Sail status through the client.
     * @principle Allows public read access but restricts write access.
     */
    match /sail_status/{docId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if isSignedIn();
        allow create, update, delete: if isSignedIn() == false;
    }

    /**
     * @description Controls access to OE Jobs.
     * @path /jobs/{docId}
     * @allow (get, list) Any authenticated user can read OE Jobs.
     * @deny (create, update, delete) No user can create, update, or delete OE Jobs through the client.
     * @principle Allows public read access but restricts write access.
     */
    match /jobs/{docId} {
        function isSignedIn() {
          return request.auth != null;
        }
        allow get, list: if isSignedIn();
        allow create, update, delete: if isSignedIn() == false;
    }
  }
}