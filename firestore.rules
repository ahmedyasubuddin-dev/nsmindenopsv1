/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only to the owner.
 * - /pregger_reports/{docId}: Stores reports, publicly readable but writable by authenticated users.
 * - /tapeheads_submissions/{docId}: Stores tapehead submissions, publicly readable but writable by authenticated users.
 * - /tapehead_reviews/{docId}: Stores tapehead reviews, publicly readable but writable by authenticated users.
 * - /gantry_reports/{docId}: Stores gantry reports, publicly readable but writable by authenticated users.
 * - /films_reports/{docId}: Stores films reports, publicly readable but writable by authenticated users.
 * - /graphics_tasks/{docId}: Stores graphics tasks, publicly readable but writable by authenticated users.
 * - /qc_inspections/{docId}: Stores QC inspections, publicly readable but writable by authenticated users.
 * - /analytics_snapshots/{docId}: Stores analytics snapshots, publicly readable but writable by authenticated users.
 * - /sail_status/{docId}: Stores sail statuses, publicly readable but writable by authenticated users.
 * - /jobs/{docId}: Stores OE jobs, publicly readable but writable by authenticated users.
 *
 * Key Security Decisions:
 * - User profiles are strictly private and only accessible to the owning user.
 * - Other collections are readable by all users, but write access is restricted to authenticated users.
 * - The rules are configured to be flexible on data shapes during the prototyping phase.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with ID 'gl0dR68ptCVebE5a8IOuk8YjkzI2' can create their own profile.
     * @deny (create) User with ID 'gl0dR68ptCVebE5a8IOuk8YjkzI2' cannot create a profile with a different user ID.
     * @allow (get) User with ID 'gl0dR68ptCVebE5a8IOuk8YjkzI2' can read their own profile.
     * @deny (get) User with ID 'gl0dR68ptCVebE5a8IOuk8YjkzI2' cannot read another user's profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to pregger reports.
     * @path /pregger_reports/{docId}
     * @allow (get) Any user can read pregger reports.
     * @allow (list) Any user can list pregger reports.
     * @allow (create) Authenticated users can create pregger reports.
     * @deny (create) Unauthenticated users cannot create pregger reports.
     * @principle Allows public read access with authenticated-user-only writes.
     */
    match /pregger_reports/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

      /**
       * @description Controls access to tapeheads submissions.
       * @path /tapeheads_submissions/{docId}
       * @allow (get) Any user can read tapeheads submissions.
       * @allow (list) Any user can list tapeheads submissions.
       * @allow (create) Authenticated users can create tapeheads submissions.
       * @deny (create) Unauthenticated users cannot create tapeheads submissions.
       * @principle Allows public read access with authenticated-user-only writes.
       */
    match /tapeheads_submissions/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

      /**
       * @description Controls access to tapehead reviews.
       * @path /tapehead_reviews/{docId}
       * @allow (get) Any user can read tapehead reviews.
       * @allow (list) Any user can list tapehead reviews.
       * @allow (create) Authenticated users can create tapehead reviews.
       * @deny (create) Unauthenticated users cannot create tapehead reviews.
       * @principle Allows public read access with authenticated-user-only writes.
       */
    match /tapehead_reviews/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to gantry reports.
     * @path /gantry_reports/{docId}
     * @allow (get) Any user can read gantry reports.
     * @allow (list) Any user can list gantry reports.
     * @allow (create) Authenticated users can create gantry reports.
     * @deny (create) Unauthenticated users cannot create gantry reports.
     * @principle Allows public read access with authenticated-user-only writes.
     */
    match /gantry_reports/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to films reports.
     * @path /films_reports/{docId}
     * @allow (get) Any user can read films reports.
     * @allow (list) Any user can list films reports.
     * @allow (create) Authenticated users can create films reports.
     * @deny (create) Unauthenticated users cannot create films reports.
     * @principle Allows public read access with authenticated-user-only writes.
     */
    match /films_reports/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to graphics tasks.
     * @path /graphics_tasks/{docId}
     * @allow (get) Any user can read graphics tasks.
     * @allow (list) Any user can list graphics tasks.
     * @allow (create) Authenticated users can create graphics tasks.
     * @deny (create) Unauthenticated users cannot create graphics tasks.
     * @principle Allows public read access with authenticated-user-only writes.
     */
    match /graphics_tasks/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to QC inspections.
     * @path /qc_inspections/{docId}
     * @allow (get) Any user can read QC inspections.
     * @allow (list) Any user can list QC inspections.
     * @allow (create) Authenticated users can create QC inspections.
     * @deny (create) Unauthenticated users cannot create QC inspections.
     * @principle Allows public read access with authenticated-user-only writes.
     */
    match /qc_inspections/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to analytics snapshots.
     * @path /analytics_snapshots/{docId}
     * @allow (get) Any user can read analytics snapshots.
     * @allow (list) Any user can list analytics snapshots.
     * @allow (create) Authenticated users can create analytics snapshots.
     * @deny (create) Unauthenticated users cannot create analytics snapshots.
     * @principle Allows public read access with authenticated-user-only writes.
     */
    match /analytics_snapshots/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to sail status.
     * @path /sail_status/{docId}
     * @allow (get) Any user can read sail status.
     * @allow (list) Any user can list sail status.
     * @allow (create) Authenticated users can create sail status.
     * @deny (create) Unauthenticated users cannot create sail status.
     * @principle Allows public read access with authenticated-user-only writes.
     */
    match /sail_status/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to OE jobs.
     * @path /jobs/{docId}
     * @allow (get) Any user can read OE jobs.
     * @allow (list) Any user can list OE jobs.
     * @allow (create) Authenticated users can create OE jobs.
     * @deny (create) Unauthenticated users cannot create OE jobs.
     * @principle Allows public read access with authenticated-user-only writes.
     */
    match /jobs/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
  }
}