rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is authenticated.
     * @return {boolean} True if the user is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user has the required role.
     * @param {array} allowedRoles An array of roles allowed to access the resource.
     * @return {boolean} True if the user has one of the allowed roles, false otherwise.
     */
    function hasRole(allowedRoles) {
      return isSignedIn() && request.auth.token.role in allowedRoles;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the document and the document exists.
     * @param {string} userId The user ID to compare against.
     * @return {boolean} True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Rules for user profiles.
     * @path /users/{userId}
     * @allow (read) User with ID 'user123' reading their own profile.
     *  request.auth.uid = 'user123'
     * @allow (read) Superuser reading any user profile.
     *  request.auth.token.role = 'superuser'
     * @allow (write) Superuser creating/updating any user profile.
     *  request.auth.token.role = 'superuser'
     * @deny (read) User 'user456' reading profile of 'user123'.
     *  request.auth.uid = 'user456'
     * @deny (write) Non-superuser creating/updating any user profile.
     *  request.auth.token.role = 'b2_supervisor'
     * @principle Enforces user-owned profiles with superuser override.
     */
    match /users/{userId} {
      allow get: if isOwner(userId) || hasRole(["superuser"]);
      allow list: if false; // Listing users is not allowed

      allow create: if hasRole(["superuser"]);
      allow update: if isOwner(userId) || hasRole(["superuser"]);
      allow delete: if hasRole(["superuser"]);
    }

    /**
     * @description Rules for Pregger reports.
     * @path /pregger_reports/{doc}
     * @allow (read, write) User with role 'superuser' creating a Pregger report.
     *  request.auth.token.role = 'superuser'
     * @allow (read, write) User with role 'b2_supervisor' reading a Pregger report.
     *  request.auth.token.role = 'b2_supervisor'
     * @deny (read, write) User with role 'tapehead_operators' attempting to read a Pregger report.
     *  request.auth.token.role = 'tapehead_operators'
     * @principle Role-based access control for department data.
     */
    match /pregger_reports/{doc} {
      allow get: if hasRole(["superuser","b2_supervisor","pregger_lead"]);
      allow list: if hasRole(["superuser","b2_supervisor","pregger_lead"]);
      allow create: if hasRole(["superuser","b2_supervisor","pregger_lead"]);
      allow update: if hasRole(["superuser","b2_supervisor","pregger_lead"]);
      allow delete: if hasRole(["superuser","b2_supervisor","pregger_lead"]);
    }

    /**
     * @description Rules for Tapehead entries.
     * @path /tapehead_entries/{doc}
     * @allow (read, write) User with role 'superuser' creating a Tapehead entry.
     *  request.auth.token.role = 'superuser'
     * @allow (read, write) User with role 'tapehead_operators' creating a Tapehead entry.
     *  request.auth.token.role = 'tapehead_operators'
     * @deny (read, write) User with role 'pregger_lead' attempting to read a Tapehead entry.
     *  request.auth.token.role = 'pregger_lead'
     * @principle Role-based access control for department data.
     */
    match /tapehead_entries/{doc} {
      allow get: if hasRole(["superuser","b2_supervisor","tapehead_operators","tapehead_lead"]);
      allow list: if hasRole(["superuser","b2_supervisor","tapehead_operators","tapehead_lead"]);
      allow create: if hasRole(["superuser","b2_supervisor","tapehead_operators","tapehead_lead"]);
      allow update: if hasRole(["superuser","b2_supervisor","tapehead_operators","tapehead_lead"]);
      allow delete: if hasRole(["superuser","b2_supervisor","tapehead_operators","tapehead_lead"]);
    }

    /**
     * @description Rules for Tapehead reviews.
     * @path /tapehead_reviews/{doc}
     * @allow (read, write) User with role 'superuser' creating a Tapehead review.
     *  request.auth.token.role = 'superuser'
     * @allow (read, write) User with role 'tapehead_lead' creating a Tapehead review.
     *  request.auth.token.role = 'tapehead_lead'
     * @deny (read, write) User with role 'pregger_lead' attempting to read a Tapehead review.
     *  request.auth.token.role = 'pregger_lead'
     * @principle Role-based access control for department data.
     */
    match /tapehead_reviews/{doc} {
      allow get: if hasRole(["superuser","b2_supervisor","tapehead_lead"]);
      allow list: if hasRole(["superuser","b2_supervisor","tapehead_lead"]);
      allow create: if hasRole(["superuser","b2_supervisor","tapehead_lead"]);
      allow update: if hasRole(["superuser","b2_supervisor","tapehead_lead"]);
      allow delete: if hasRole(["superuser","b2_supervisor","tapehead_lead"]);
    }

    /**
     * @description Rules for Gantry reports.
     * @path /gantry_reports/{doc}
     * @allow (read, write) User with role 'superuser' creating a Gantry report.
     *  request.auth.token.role = 'superuser'
     * @allow (read, write) User with role 'gantry_lead' creating a Gantry report.
     *  request.auth.token.role = 'gantry_lead'
     * @deny (read, write) User with role 'pregger_lead' attempting to read a Gantry report.
     *  request.auth.token.role = 'pregger_lead'
     * @principle Role-based access control for department data.
     */
    match /gantry_reports/{doc} {
      allow get: if hasRole(["superuser","b1_supervisor","gantry_lead"]);
      allow list: if hasRole(["superuser","b1_supervisor","gantry_lead"]);
      allow create: if hasRole(["superuser","b1_supervisor","gantry_lead"]);
      allow update: if hasRole(["superuser","b1_supervisor","gantry_lead"]);
      allow delete: if hasRole(["superuser","b1_supervisor","gantry_lead"]);
    }

    /**
     * @description Rules for Films reports.
     * @path /films_reports/{doc}
     * @allow (read, write) User with role 'superuser' creating a Films report.
     *  request.auth.token.role = 'superuser'
     * @allow (read, write) User with role 'films_lead' creating a Films report.
     *  request.auth.token.role = 'films_lead'
     * @deny (read, write) User with role 'pregger_lead' attempting to read a Films report.
     *  request.auth.token.role = 'pregger_lead'
     * @principle Role-based access control for department data.
     */
    match /films_reports/{doc} {
      allow get: if hasRole(["superuser","b1_supervisor","films_lead"]);
      allow list: if hasRole(["superuser","b1_supervisor","films_lead"]);
      allow create: if hasRole(["superuser","b1_supervisor","films_lead"]);
      allow update: if hasRole(["superuser","b1_supervisor","films_lead"]);
      allow delete: if hasRole(["superuser","b1_supervisor","films_lead"]);
    }

    /**
     * @description Rules for Graphics reports.
     * @path /graphics_reports/{doc}
     * @allow (read, write) User with role 'superuser' creating a Graphics report.
     *  request.auth.token.role = 'superuser'
     * @allow (read, write) User with role 'graphics_lead' creating a Graphics report.
     *  request.auth.token.role = 'graphics_lead'
     * @deny (read, write) User with role 'pregger_lead' attempting to read a Graphics report.
     *  request.auth.token.role = 'pregger_lead'
     * @principle Role-based access control for department data.
     */
    match /graphics_reports/{doc} {
      allow get: if hasRole(["superuser","b1_supervisor","graphics_lead"]);
      allow list: if hasRole(["superuser","b1_supervisor","graphics_lead"]);
      allow create: if hasRole(["superuser","b1_supervisor","graphics_lead"]);
      allow update: if hasRole(["superuser","b1_supervisor","graphics_lead"]);
      allow delete: if hasRole(["superuser","b1_supervisor","graphics_lead"]);
    }

    /**
     * @description Rules for QC inspections.
     * @path /qc_inspections/{doc}
     * @allow (read, write) User with role 'superuser' creating a QC inspection.
     *  request.auth.token.role = 'superuser'
     * @allow (read, write) User with role 'quality_manager' creating a QC inspection.
     *  request.auth.token.role = 'quality_manager'
     * @deny (read, write) User with role 'pregger_lead' attempting to read a QC inspection.
     *  request.auth.token.role = 'pregger_lead'
     * @principle Role-based access control for department data.
     */
    match /qc_inspections/{doc} {
      allow get: if hasRole(["superuser","quality_manager"]);
      allow list: if hasRole(["superuser","quality_manager"]);
      allow create: if hasRole(["superuser","quality_manager"]);
      allow update: if hasRole(["superuser","quality_manager"]);
      allow delete: if hasRole(["superuser","quality_manager"]);
    }

    /**
     * @description Rules for analytics snapshots.
     * @path /analytics_snapshots/{doc}
     * @allow (read) User with role 'superuser' reading an analytics snapshot.
     *  request.auth.token.role = 'superuser'
     * @allow (write) User with role 'superuser' creating an analytics snapshot.
     *  request.auth.token.role = 'superuser'
     * @deny (write) User with role 'b1_supervisor' attempting to create an analytics snapshot.
     *  request.auth.token.role = 'b1_supervisor'
     * @principle Differentiated read/write access based on roles.
     */
    match /analytics_snapshots/{doc} {
      allow get: if hasRole(["superuser","b1_supervisor","b2_supervisor","management","quality_manager"]);
      allow list: if hasRole(["superuser","b1_supervisor","b2_supervisor","management","quality_manager"]);
      allow create: if hasRole(["superuser"]);
      allow update: if hasRole(["superuser"]);
      allow delete: if hasRole(["superuser"]);
    }

    /**
     * @description Rules for sail status.
     * @path /sail_status/{doc}
     * @allow (read) User with role 'superuser' reading sail status.
     *  request.auth.token.role = 'superuser'
     * @allow (write) User with role 'b1_supervisor' updating sail status.
     *  request.auth.token.role = 'b1_supervisor'
     * @deny (write) User with role 'quality_manager' attempting to update sail status.
     *  request.auth.token.role = 'quality_manager'
     * @principle Broad read access, restricted write access based on roles.
     */
    match /sail_status/{doc} {
      allow get: if hasRole(["superuser","b1_supervisor","b2_supervisor","management","quality_manager","pregger_lead","tapehead_lead","gantry_lead","films_lead","graphics_lead"]);
      allow list: if hasRole(["superuser","b1_supervisor","b2_supervisor","management","quality_manager","pregger_lead","tapehead_lead","gantry_lead","films_lead","graphics_lead"]);
      allow create: if hasRole(["superuser","b1_supervisor","b2_supervisor","pregger_lead","tapehead_lead","gantry_lead","films_lead","graphics_lead"]);
      allow update: if hasRole(["superuser","b1_supervisor","b2_supervisor","pregger_lead","tapehead_lead","gantry_lead","films_lead","graphics_lead"]);
      allow delete: if hasRole(["superuser","b1_supervisor","b2_supervisor","pregger_lead","tapehead_lead","gantry_lead","films_lead","graphics_lead"]);
    }

    /**
     * @description Default deny rule for all unmatched paths.
     * @path /{document=**}
     * @allow (none) No operations are allowed by default.
     * @principle Enforces least privilege by denying all access unless explicitly allowed.
     */
    match /{document=**} {
       allow read, write, create, delete, get: if false;
    }
  }
}