rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (get, update, delete): Authenticated user can access their own profile.
     * @allow (create): Authenticated user can create their own profile, if the userId matches.
     * @deny (get, update, delete): Authenticated user cannot access another user's profile.
     * @deny (create): Authenticated user cannot create a profile with a mismatched userId.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // User listing is not permitted

      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    function isOwnerOfDocument(resource) {
      return resource.data.ownerId == request.auth.uid || resource.data.authorId == request.auth.uid;
    }

    function isCreatingOwnedDocument() {
      return request.resource.data.ownerId == request.auth.uid || request.resource.data.authorId == request.auth.uid;
    }

    /**
     * @description Controls access to Pregger reports.
     * @path /pregger-reports/{docId}
     * @allow (get, list): Anyone can read Pregger reports.
     * @deny (create, update, delete): Only the owner can modify Pregger reports.  Requires an `ownerId` or `authorId` field in the document.
     * @principle Allows public read access with owner-only writes.
     */
    match /pregger-reports/{docId} {
        allow get, list: if true;
        allow create: if isSignedIn() && isCreatingOwnedDocument();
        allow update: if isSignedIn() && isOwnerOfDocument(resource);
        allow delete: if isSignedIn() && isOwnerOfDocument(resource);
    }

    /**
     * @description Controls access to Tapehead submissions.
     * @path /tapeheads-submissions/{docId}
     * @allow (get, list): Anyone can read Tapehead submissions.
     * @deny (create, update, delete): Only the owner can modify Tapehead submissions. Requires an `ownerId` or `authorId` field in the document.
     * @principle Allows public read access with owner-only writes.
     */
    match /tapeheads-submissions/{docId} {
        allow get, list: if true;
        allow create: if isSignedIn() && isCreatingOwnedDocument();
        allow update: if isSignedIn() && isOwnerOfDocument(resource);
        allow delete: if isSignedIn() && isOwnerOfDocument(resource);
    }

      /**
       * @description Controls access to Tapehead Reviews.
       * @path /tapehead-reviews/{docId}
       * @allow (get, list): Anyone can read Tapehead reviews.
       * @deny (create, update, delete): Only the owner can modify Tapehead reviews. Requires an `ownerId` or `authorId` field in the document.
       * @principle Allows public read access with owner-only writes.
       */
    match /tapehead-reviews/{docId} {
        allow get, list: if true;
        allow create: if isSignedIn() && isCreatingOwnedDocument();
        allow update: if isSignedIn() && isOwnerOfDocument(resource);
        allow delete: if isSignedIn() && isOwnerOfDocument(resource);
    }

    /**
     * @description Controls access to Gantry reports.
     * @path /gantry-reports/{docId}
     * @allow (get, list): Anyone can read Gantry reports.
     * @deny (create, update, delete): Only the owner can modify Gantry reports. Requires an `ownerId` or `authorId` field in the document.
     * @principle Allows public read access with owner-only writes.
     */
    match /gantry-reports/{docId} {
        allow get, list: if true;
        allow create: if isSignedIn() && isCreatingOwnedDocument();
        allow update: if isSignedIn() && isOwnerOfDocument(resource);
        allow delete: if isSignedIn() && isOwnerOfDocument(resource);
    }

    /**
     * @description Controls access to Films reports.
     * @path /films-reports/{docId}
     * @allow (get, list): Anyone can read Films reports.
     * @deny (create, update, delete): Only the owner can modify Films reports. Requires an `ownerId` or `authorId` field in the document.
     * @principle Allows public read access with owner-only writes.
     */
    match /films-reports/{docId} {
        allow get, list: if true;
        allow create: if isSignedIn() && isCreatingOwnedDocument();
        allow update: if isSignedIn() && isOwnerOfDocument(resource);
        allow delete: if isSignedIn() && isOwnerOfDocument(resource);
    }

    /**
     * @description Controls access to Graphics tasks.
     * @path /graphics-tasks/{docId}
     * @allow (get, list): Anyone can read Graphics tasks.
     * @deny (create, update, delete): Only the owner can modify Graphics tasks. Requires an `ownerId` or `authorId` field in the document.
     * @principle Allows public read access with owner-only writes.
     */
    match /graphics-tasks/{docId} {
        allow get, list: if true;
        allow create: if isSignedIn() && isCreatingOwnedDocument();
        allow update: if isSignedIn() && isOwnerOfDocument(resource);
        allow delete: if isSignedIn() && isOwnerOfDocument(resource);
    }

    /**
     * @description Controls access to QC inspections.
     * @path /qc-inspections/{docId}
     * @allow (get, list): Anyone can read QC inspection reports.
     * @deny (create, update, delete): Only the owner can modify QC inspection reports. Requires an `ownerId` or `authorId` field in the document.
     * @principle Allows public read access with owner-only writes.
     */
    match /qc-inspections/{docId} {
        allow get, list: if true;
        allow create: if isSignedIn() && isCreatingOwnedDocument();
        allow update: if isSignedIn() && isOwnerOfDocument(resource);
        allow delete: if isSignedIn() && isOwnerOfDocument(resource);
    }

    /**
     * @description Controls access to analytics snapshots.
     * @path /analytics-snapshots/{docId}
     * @allow (get, list): Anyone can read analytics snapshots.
     * @deny (create, update, delete): Only the owner can modify analytics snapshots. Requires an `ownerId` or `authorId` field in the document.
     * @principle Allows public read access with owner-only writes.
     */
    match /analytics-snapshots/{docId} {
        allow get, list: if true;
        allow create: if isSignedIn() && isCreatingOwnedDocument();
        allow update: if isSignedIn() && isOwnerOfDocument(resource);
        allow delete: if isSignedIn() && isOwnerOfDocument(resource);
    }

    /**
     * @description Controls access to sail status.
     * @path /sail-status/{docId}
     * @allow (get, list): Anyone can read sail status.
     * @deny (create, update, delete): Only the owner can modify sail status. Requires an `ownerId` or `authorId` field in the document.
     * @principle Allows public read access with owner-only writes.
     */
    match /sail-status/{docId} {
        allow get, list: if true;
        allow create: if isSignedIn() && isCreatingOwnedDocument();
        allow update: if isSignedIn() && isOwnerOfDocument(resource);
        allow delete: if isSignedIn() && isOwnerOfDocument(resource);
    }

    /**
     * @description Controls access to OE jobs.
     * @path /jobs/{docId}
     * @allow (get, list): Anyone can read OE jobs.
     * @deny (create, update, delete): Only the owner can modify OE jobs. Requires an `ownerId` or `authorId` field in the document.
     * @principle Allows public read access with owner-only writes.
     */
    match /jobs/{docId} {
        allow get, list: if true;
        allow create: if isSignedIn() && isCreatingOwnedDocument();
        allow update: if isSignedIn() && isOwnerOfDocument(resource);
        allow delete: if isSignedIn() && isOwnerOfDocument(resource);
    }
  }
}