/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes strong authorization by enforcing strict ownership or role-based access control.
 * Data validation is relaxed to facilitate rapid prototyping.
 *
 * Data Structure:
 * The Firestore database contains several top-level collections, each representing a specific data entity
 * (e.g., users, reports, tasks). User profiles are stored under `/users/{userId}`.
 *
 * Key Security Decisions:
 * - User listing is disabled for `/users` collection.
 * - All write operations are protected by authorization checks based on user authentication.
 * - Data validation is limited to fields essential for authorization (e.g., ownership fields).
 * - The ruleset uses helper functions to encapsulate complex logic and improve readability.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @deny (create) Authenticated user cannot create a profile for another user.
     * @allow (get, update, delete) Authenticated user can only access their own profile.
     * @deny (get, update, delete) Authenticated user cannot access another user's profile.
     * @principle Enforces document ownership for writes and restricts access to a user's own data tree.
     */
    match /users/{userId} {
      allow create: if isSignedIn() && isOwner(userId);
      allow get, update, delete: if isSignedIn() && isOwner(userId);
      allow list: if false;
    }

    /**
     * @description Controls access to Pregger reports.
     * @path /pregger_reports/{docId}
     * @allow (get, list) Anyone can read Pregger reports.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete Pregger reports.
     * @principle Public read, authenticated write.
     */
    match /pregger_reports/{docId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Tapehead submissions.
     * @path /tapeheads-submissions/{docId}
     * @allow (get, list) Anyone can read Tapehead submissions.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete Tapehead submissions.
     * @principle Public read, authenticated write.
     */
    match /tapeheads-submissions/{docId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Tapehead reviews.
     * @path /tapehead-reviews/{docId}
     * @allow (get, list) Anyone can read Tapehead reviews.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete Tapehead reviews.
     * @principle Public read, authenticated write.
     */
    match /tapehead-reviews/{docId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Gantry reports.
     * @path /gantry_reports/{docId}
     * @allow (get, list) Anyone can read Gantry reports.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete Gantry reports.
     * @principle Public read, authenticated write.
     */
    match /gantry_reports/{docId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Films reports.
     * @path /films_reports/{docId}
     * @allow (get, list) Anyone can read Films reports.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete Films reports.
     * @principle Public read, authenticated write.
     */
    match /films_reports/{docId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Graphics tasks.
     * @path /graphics-tasks/{docId}
     * @allow (get, list) Anyone can read Graphics tasks.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete Graphics tasks.
     * @principle Public read, authenticated write.
     */
    match /graphics-tasks/{docId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to QC inspections.
     * @path /qc_inspections/{docId}
     * @allow (get, list) Anyone can read QC inspections.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete QC inspections.
     * @principle Public read, authenticated write.
     */
    match /qc_inspections/{docId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Analytics snapshots.
     * @path /analytics-snapshots/{docId}
     * @allow (get, list) Anyone can read Analytics snapshots.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete Analytics snapshots.
     * @principle Public read, authenticated write.
     */
    match /analytics-snapshots/{docId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Sail status.
     * @path /sail-status/{docId}
     * @allow (get, list) Anyone can read Sail status.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete Sail status.
     * @principle Public read, authenticated write.
     */
    match /sail-status/{docId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to OE Jobs.
     * @path /jobs/{docId}
     * @allow (get, list) Anyone can read OE Jobs.
     * @deny (create, update, delete) Only authenticated users can create, update, or delete OE Jobs.
     * @principle Public read, authenticated write.
     */
    match /jobs/{docId} {
      allow get, list: if true;
      allow create, update, delete: if isSignedIn(); // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }
  }
}