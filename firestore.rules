/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by default, ensuring that all write operations
 * are protected behind explicit authorization checks. Data validation is relaxed
 * to enable rapid prototyping and schema iteration.
 *
 * Data Structure:
 * The Firestore database consists of several top-level collections, each representing
 * a distinct data entity (e.g., users, reports, tasks).
 * - `/users/{userId}`: Stores user profile information. Access is restricted to the
 *   user themselves (owner-only).
 * - `/pregger_reports/{docId}`, `/tapeheads_submissions/{docId}`, `/tapehead_reviews/{docId}`,
 *   `/gantry_reports/{docId}`, `/films_reports/{docId}`, `/graphics_tasks/{docId}`,
 *   `/qc_inspections/{docId}`, `/analytics_snapshots/{docId}`, `/sail_status/{docId}`,
 *   `/jobs/{docId}`: Stores data related to their names. Public read access is allowed,
 *   but write access is currently denied.
 *
 * Key Security Decisions:
 * - User listing is disabled to prevent unauthorized enumeration of user accounts.
 * - Write access to most collections is restricted to specific roles.
 *
 * WARNING:
 * These rules are generated for PROTOTYPING purposes. Implement proper authorization
 * and data validation logic before deploying to production.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their own profile.
     * @allow (get, list, update, delete) User can only access their own profile.
     * @deny (create) User cannot create a profile with a mismatched ID.
     * @principle Enforces document ownership.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      function isSignedIn() {
        return request.auth != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // Disable user listing
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows public read access to Pregger reports, but restricts writes.
     * @path /pregger_reports/{docId}
     * @allow (get, list) Any user can read Pregger reports.
     * @deny (create, update, delete) No user can create, update, or delete Pregger reports without proper authorization.
     * @principle Allows public read access with restricted writes.
     */
    match /pregger_reports/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to Tapehead submissions, but restricts writes.
     * @path /tapeheads_submissions/{docId}
     * @allow (get, list) Any user can read Tapehead submissions.
     * @deny (create, update, delete) No user can create, update, or delete Tapehead submissions without proper authorization.
     * @principle Allows public read access with restricted writes.
     */
    match /tapeheads_submissions/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to Tapehead reviews, but restricts writes.
     * @path /tapehead_reviews/{docId}
     * @allow (get, list) Any user can read Tapehead reviews.
     * @deny (create, update, delete) No user can create, update, or delete Tapehead reviews without proper authorization.
     * @principle Allows public read access with restricted writes.
     */
    match /tapehead_reviews/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to Gantry reports, but restricts writes.
     * @path /gantry_reports/{docId}
     * @allow (get, list) Any user can read Gantry reports.
     * @deny (create, update, delete) No user can create, update, or delete Gantry reports without proper authorization.
     * @principle Allows public read access with restricted writes.
     */
    match /gantry_reports/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to Films reports, but restricts writes.
     * @path /films_reports/{docId}
     * @allow (get, list) Any user can read Films reports.
     * @deny (create, update, delete) No user can create, update, or delete Films reports without proper authorization.
     * @principle Allows public read access with restricted writes.
     */
    match /films_reports/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to Graphics tasks, but restricts writes.
     * @path /graphics_tasks/{docId}
     * @allow (get, list) Any user can read Graphics tasks.
     * @deny (create, update, delete) No user can create, update, or delete Graphics tasks without proper authorization.
     * @principle Allows public read access with restricted writes.
     */
    match /graphics_tasks/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to QC inspections, but restricts writes.
     * @path /qc_inspections/{docId}
     * @allow (get, list) Any user can read QC inspections.
     * @deny (create, update, delete) No user can create, update, or delete QC inspections without proper authorization.
     * @principle Allows public read access with restricted writes.
     */
    match /qc_inspections/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to Analytics snapshots, but restricts writes.
     * @path /analytics_snapshots/{docId}
     * @allow (get, list) Any user can read Analytics snapshots.
     * @deny (create, update, delete) No user can create, update, or delete Analytics snapshots without proper authorization.
     * @principle Allows public read access with restricted writes.
     */
    match /analytics_snapshots/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to Sail status, but restricts writes.
     * @path /sail_status/{docId}
     * @allow (get, list) Any user can read Sail status.
     * @deny (create, update, delete) No user can create, update, or delete Sail status without proper authorization.
     * @principle Allows public read access with restricted writes.
     */
    match /sail_status/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to OE Jobs, but restricts writes.
     * @path /jobs/{docId}
     * @allow (get, list) Any user can read OE Jobs.
     * @deny (create, update, delete) No user can create, update, or delete OE Jobs without proper authorization.
     * @principle Allows public read access with restricted writes.
     */
    match /jobs/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}