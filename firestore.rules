/**
 * @fileoverview Firestore Security Rules for SRD (Shift Report Dashboard).
 *
 * Core Philosophy:
 * This ruleset enforces strict role-based access control to Firestore data,
 * leveraging Firebase Authentication custom claims ("role" and "active") for authorization.
 * Only authenticated and active users can access the database.
 * Access to specific collections and documents is then granted based on the user's assigned role.
 * Users can only manage their own profiles. A superuser role has full access.
 *
 * Data Structure:
 * - User profiles are stored in `/users/{userId}`.
 * - Department-specific reports are stored in top-level collections (e.g., `/pregger_reports/{reportId}`).
 * - Analytics and Sail Status data are stored in top-level collections (`/analytics_snapshots/{snapshotId}`, `/sail_status/{sailId}`).
 *
 * Key Security Decisions:
 * - User listing is denied to all roles except the superuser.
 * - Custom claims are the source of truth for authorization, NOT data in Firestore documents.
 * - Documents are not listable unless explicitly allowed.
 *
 * Denormalization for Authorization:
 * - The user's role and active status are stored in custom claims, eliminating the need to read the `/users/{userId}` document for every request.
 *
 * Structural Segregation:
 * - Private user data (profiles) is stored in a separate `/users/{userId}` collection, while public data (reports, analytics) is stored in top-level collections. This ensures that user data is not accidentally exposed.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in and active.
     * @return {boolean} True if the user is signed in and active, false otherwise.
     */
    function isSignedInAndActive() {
      return request.auth != null && request.auth.token.active == true;
    }

    /**
     * @description Checks if the user has the superuser role.
     * @return {boolean} True if the user has the superuser role, false otherwise.
     */
    function isSuperuser() {
      return isSignedInAndActive() && request.auth.token.role == 'superuser';
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedInAndActive() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the resource and the resource exists.
     * @param {string} userId The user ID to check against.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource);
    }

    /**
     * @description Checks if the user has the specified role.
     * @param {string} role The role to check for.
     * @return {boolean} True if the user has the role, false otherwise.
     */
    function hasRole(role) {
      return isSignedInAndActive() && request.auth.token.role == role;
    }

    /**
     * @description Checks if the user has at least one of the specified roles.
     * @param {array} roles An array of roles to check for.
     * @return {boolean} True if the user has at least one of the roles, false otherwise.
     */
    function hasAnyRole(roles) {
      return isSignedInAndActive() && roles.hasAny(request.auth.token.role);
    }

    /**
     * @description Checks if the user has the 'b2_supervisor' role.
     * @return {boolean} True if the user has the 'b2_supervisor' role, false otherwise.
     */
    function isB2Supervisor() {
        return hasRole('b2_supervisor');
    }

    /**
     * @description Checks if the user has the 'b1_supervisor' role.
     * @return {boolean} True if the user has the 'b1_supervisor' role, false otherwise.
     */
    function isB1Supervisor() {
        return hasRole('b1_supervisor');
    }

    /**
     * @description Checks if the user has the 'quality_manager' role.
     * @return {boolean} True if the user has the 'quality_manager' role, false otherwise.
     */
    function isQualityManager() {
        return hasRole('quality_manager');
    }

    /**
     * @description Checks if the user has the 'management' role.
     * @return {boolean} True if the user has the 'management' role, false otherwise.
     */
    function isManagement() {
        return hasRole('management');
    }

    /**
     * @description Checks if the user has the 'pregger_lead' role.
     * @return {boolean} True if the user has the 'pregger_lead' role, false otherwise.
     */
    function isPreggerLead() {
        return hasRole('pregger_lead');
    }

    /**
     * @description Checks if the user has the 'tapehead_operator' role.
     * @return {boolean} True if the user has the 'tapehead_operator' role, false otherwise.
     */
    function isTapeheadOperator() {
        return hasRole('tapehead_operator');
    }

    /**
     * @description Checks if the user has the 'tapehead_lead' role.
     * @return {boolean} True if the user has the 'tapehead_lead' role, false otherwise.
     */
    function isTapeheadLead() {
        return hasRole('tapehead_lead');
    }

    /**
     * @description Checks if the user has the 'gantry_lead' role.
     * @return {boolean} True if the user has the 'gantry_lead' role, false otherwise.
     */
    function isGantryLead() {
        return hasRole('gantry_lead');
    }

    /**
     * @description Checks if the user has the 'films_lead' role.
     * @return {boolean} True if the user has the 'films_lead' role, false otherwise.
     */
    function isFilmsLead() {
        return hasRole('films_lead');
    }

    /**
     * @description Checks if the user has the 'graphics_lead' role.
     * @return {boolean} True if the user has the 'graphics_lead' role, false otherwise.
     */
    function isGraphicsLead() {
        return hasRole('graphics_lead');
    }


    /**
     * @description Manages user profiles.
     * @path /users/{userId}
     * @allow (create) User with ID 'test_user' can create their profile.
     * @deny (create) User with ID 'another_user' cannot create a profile with ID 'test_user'.
     * @allow (get) Any signed in user can read a user's profile.
     * @deny (list) No one can list user profiles.
     * @allow (update) User with ID 'test_user' can update their own profile.
     * @deny (update) User with ID 'another_user' cannot update profile with ID 'test_user'.
     * @principle Enforces document ownership for writes; only the owner can create, update, or delete their profile.
     */
    match /users/{userId} {
      // Only the user themselves can create their profile. The `create` operation happens before the document exists,
      // so we must compare against the `request.resource.data` (incoming data).
      allow create: if isOwner(userId);
      allow get: if isSignedInAndActive();
      allow list: if isSuperuser();
      allow update: if isExistingOwner(userId);
      allow delete: if isSuperuser();
    }

     /**
      * @description Manages reports from the Pregger department.
      * @path /pregger_reports/{docId}
      * @allow (create) b2_supervisor and pregger_lead can create pregger reports
      * @deny (create) b1_supervisor can not create pregger reports
      * @allow (get, list) Any user can read pregger reports.
      * @allow (update, delete) b2_supervisor can update and delete pregger reports
      * @principle Enforces role-based access control.
      */
    match /pregger_reports/{docId} {
      allow create: if isB2Supervisor() || isPreggerLead();
      allow get: if isSignedInAndActive();
      allow list: if isSignedInAndActive();
      allow update: if isB2Supervisor();
      allow delete: if isB2Supervisor();
    }

    /**
     * @description Manages entries from Tapehead operators.
     * @path /tapehead_entries/{docId}
     * @allow (create) b2_supervisor and tapehead_operator can create tapehead entries
     * @deny (create) b1_supervisor can not create tapehead entries
     * @allow (get, list) Any user can read tapehead entries.
     * @allow (update, delete) b2_supervisor can update and delete tapehead entries
     * @principle Enforces role-based access control.
     */
    match /tapehead_entries/{docId} {
      allow create: if isB2Supervisor() || isTapeheadOperator() || isTapeheadLead();
      allow get: if isSignedInAndActive();
      allow list: if isSignedInAndActive();
      allow update: if isB2Supervisor();
      allow delete: if isB2Supervisor();
    }
     /**
      * @description Manages tapehead submissions.
      * @path /tapeheads-submissions/{docId}
      */
     match /tapeheads-submissions/{docId} {
          allow create: if isB2Supervisor() || isTapeheadOperator() || isTapeheadLead();
          allow get: if isSignedInAndActive();
          allow list: if isSignedInAndActive();
          allow update: if isB2Supervisor();
          allow delete: if isB2Supervisor();
        }

     /**
      * @description Manages tapehead reviews.
      * @path /tapehead_reviews/{docId}
      */
     match /tapehead_reviews/{docId} {
       allow create: if isB2Supervisor();
       allow get: if isSignedInAndActive();
       allow list: if isSignedInAndActive();
       allow update: if isB2Supervisor();
       allow delete: if isB2Supervisor();
     }

    /**
     * @description Manages reports from the Gantry department.
     * @path /gantry_reports/{docId}
     * @allow (create) b1_supervisor and gantry_lead can create gantry reports
     * @deny (create) b2_supervisor can not create gantry reports
     * @allow (get, list) Any user can read gantry reports.
     * @allow (update, delete) b1_supervisor can update and delete gantry reports
     * @principle Enforces role-based access control.
     */
    match /gantry_reports/{docId} {
      allow create: if isB1Supervisor() || isGantryLead();
      allow get: if isSignedInAndActive();
      allow list: if isSignedInAndActive();
      allow update: if isB1Supervisor();
      allow delete: if isB1Supervisor();
    }
    /**
     * @description Manages reports from the Gantry department.
     * @path /gantry-reports/{docId}
     */
     match /gantry-reports/{docId} {
          allow create: if isB1Supervisor() || isGantryLead();
          allow get: if isSignedInAndActive();
          allow list: if isSignedInAndActive();
          allow update: if isB1Supervisor();
          allow delete: if isB1Supervisor();
        }

    /**
     * @description Manages reports from the Films department.
     * @path /films_reports/{docId}
     * @allow (create) b1_supervisor and films_lead can create films reports
     * @deny (create) b2_supervisor can not create films reports
     * @allow (get, list) Any user can read films reports.
     * @allow (update, delete) b1_supervisor can update and delete films reports
     * @principle Enforces role-based access control.
     */
    match /films_reports/{docId} {
      allow create: if isB1Supervisor() || isFilmsLead();
      allow get: if isSignedInAndActive();
      allow list: if isSignedInAndActive();
      allow update: if isB1Supervisor();
      allow delete: if isB1Supervisor();
    }

    /**
     * @description Manages tasks for the Graphics department.
     * @path /graphics_reports/{docId}
     * @allow (create) b1_supervisor and graphics_lead can create graphics reports
     * @deny (create) b2_supervisor can not create graphics reports
     * @allow (get, list) Any user can read graphics reports.
     * @allow (update, delete) b1_supervisor can update and delete graphics reports
     * @principle Enforces role-based access control.
     */
    match /graphics_reports/{docId} {
      allow create: if isB1Supervisor() || isGraphicsLead();
      allow get: if isSignedInAndActive();
      allow list: if isSignedInAndActive();
      allow update: if isB1Supervisor();
      allow delete: if isB1Supervisor();
    }

    /**
     * @description Manages tasks for the Graphics department.
     * @path /graphics-tasks/{docId}
     */
     match /graphics-tasks/{docId} {
          allow create: if isB1Supervisor() || isGraphicsLead();
          allow get: if isSignedInAndActive();
          allow list: if isSignedInAndActive();
          allow update: if isB1Supervisor();
          allow delete: if isB1Supervisor();
        }

    /**
     * @description Manages QC inspection reports.
     * @path /qc_inspections/{docId}
     * @allow (create) quality_manager can create QC inspections
     * @deny (create) b2_supervisor can not create QC inspections
     * @allow (get, list) Any user can read QC inspections.
     * @allow (update, delete) quality_manager can update and delete QC inspections
     * @principle Enforces role-based access control.
     */
    match /qc_inspections/{docId} {
      allow create: if isQualityManager();
      allow get: if isSignedInAndActive();
      allow list: if isSignedInAndActive();
      allow update: if isQualityManager();
      allow delete: if isQualityManager();
    }

    /**
     * @description Manages aggregated analytics data.
     * @path /analytics_snapshots/{docId}
     * @allow (create) superuser can create analytics snapshots
     * @deny (create) b2_supervisor can not create analytics snapshots
     * @allow (get, list) Any user can read analytics snapshots.
     * @allow (update, delete) superuser can update and delete analytics snapshots
     * @principle Enforces role-based access control.
     */
    match /analytics_snapshots/{docId} {
      allow create: if isSuperuser();
      allow get: if isSignedInAndActive();
      allow list: if isSignedInAndActive();
      allow update: if isSuperuser();
      allow delete: if isSuperuser();
    }

    /**
     * @description Manages sail status information.
     * @path /sail_status/{docId}
     * @allow (create) Users with the roles 'b2_supervisor', 'b1_supervisor', 'quality_manager', 'management', 'pregger_lead', 'tapehead_lead', 'gantry_lead', 'films_lead', or 'graphics_lead' can create sail statuses.
     * @deny (create) Other users cannot create sail statuses.
     * @allow (get, list) Any user can read sail statuses.
     * @allow (update, delete) Users with the roles 'b2_supervisor', 'b1_supervisor', 'quality_manager', 'management', 'pregger_lead', 'tapehead_lead', 'gantry_lead', 'films_lead', or 'graphics_lead' can update and delete sail statuses.
     * @principle Enforces role-based access control.
     */
    match /sail_status/{docId} {
      allow create: if isB2Supervisor() || isB1Supervisor() || isQualityManager() || isManagement() || isPreggerLead() || isTapeheadLead() || isGantryLead() || isFilmsLead() || isGraphicsLead();
      allow get: if isSignedInAndActive();
      allow list: if isSignedInAndActive();
      allow update: if isB2Supervisor() || isB1Supervisor() || isQualityManager() || isManagement() || isPreggerLead() || isTapeheadLead() || isGantryLead() || isFilmsLead() || isGraphicsLead();
      allow delete: if isB2Supervisor() || isB1Supervisor() || isQualityManager() || isManagement() || isPreggerLead() || isTapeheadLead() || isGantryLead() || isFilmsLead() || isGraphicsLead();
    }

    /**
     * @description Manages Order Entry job definitions.
     * @path /jobs/{docId}
     * @allow (create) superuser can create Order Entry job definitions
     * @deny (create) b2_supervisor can not create Order Entry job definitions
     * @allow (get, list) Any user can read Order Entry job definitions.
     * @allow (update, delete) superuser can update and delete Order Entry job definitions
     * @principle Enforces role-based access control.
     */
    match /jobs/{docId} {
      allow create: if isSuperuser();
      allow get: if isSignedInAndActive();
      allow list: if isSignedInAndActive();
      allow update: if isSuperuser();
      allow delete: if isSuperuser();
    }
  }
}