rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read Job information. Allows anyone to create, update, and delete Job information.
     * @path /jobs/{jobId}
     * @allow (get, list)
     * @allow (create)
     * @allow (update)
     * @allow (delete)
     * @deny None.
     * @principle Allows anyone to create, read, update, and delete Job information.
     */
    match /jobs/{jobId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows anyone to read Department information. Allows anyone to create, update, and delete Department information.
     * @path /departments/{departmentId}
     * @allow (get, list)
     * @allow (create)
     * @allow (update)
     * @allow (delete)
     * @deny None.
     * @principle Allows anyone to create, read, update, and delete Department information.
     */
    match /departments/{departmentId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Allows anyone to read Shift information. Allows anyone to create, update, and delete Shift information.
     * @path /departments/{departmentId}/shifts/{shiftId}
     * @allow (get, list)
     * @allow (create)
     * @allow (update)
     * @allow (delete)
     * @deny None.
     * @principle Allows anyone to create, read, update, and delete Shift information.
     */
    match /departments/{departmentId}/shifts/{shiftId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Manages user profiles, ensuring users can only access their own data.
     * @path /users/{userId}
     * @allow (get, list) User 'bob' with UID 'bob' can read their own profile document.
     * @allow (create) User 'bob' with UID 'bob' can create their profile document.
     * @allow (update) User 'bob' with UID 'bob' can update their own profile document.
     * @allow (delete) User 'bob' with UID 'bob' can delete their own profile document.
     * @deny (get, list) User 'alice' with UID 'alice' cannot read user 'bob's profile document.
     * @deny (create) User 'alice' with UID 'alice' cannot create a profile document for user 'bob'.
     * @deny (update) User 'alice' with UID 'alice' cannot update user 'bob's profile document.
     * @deny (delete) User 'alice' with UID 'alice' cannot delete user 'bob's profile document.
     * @principle Enforces strict user ownership.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allows anyone to read Report information. Allows anyone to create, update, and delete Report information.
     * @path /departments/{departmentId}/reports/{reportId}
     * @allow (get, list)
     * @allow (create)
     * @allow (update)
     * @allow (delete)
     * @deny None.
     * @principle Allows anyone to create, read, update, and delete Report information.
     */
    match /departments/{departmentId}/reports/{reportId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }

    /**
     * @description Controls admin role assignments.
     * @path /roles_admin/{userId}
     * @allow (get) User 'bob' with UID 'bob' can read their own admin role document.
     * @allow (create) An admin can create an admin role document for user 'bob'.
     * @deny (get) User 'alice' with UID 'alice' cannot read user 'bob's admin role document.
     * @deny (create) User 'alice' without admin privileges cannot create an admin role document.
     * @deny (update) No one can update an admin role document (deletion and recreation are used instead).
     * @deny (delete) Only admins can delete an admin role document.
     * @principle Grants admin privileges based on document existence, managed by other admins.
     */
    match /roles_admin/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read Films Reports information. Allows anyone to create, update, and delete Films Reports information.
     * @path /films/{reportId}
     * @allow (get, list)
     * @allow (create)
     * @allow (update)
     * @allow (delete)
     * @deny None.
     * @principle Allows anyone to create, read, update, and delete Films Reports information.
     */
    match /films/{reportId} {
      allow get: if true;
      allow list: if true;
      allow create: if true;
      allow update: if true;
      allow delete: if true;
    }
  }

  // ----- Helper functions -----

  /**
   * @description Checks if the current user is signed in.
   * @return {bool} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the current user is the owner of the document.
   * @param {string} userId The user ID to compare against the request's auth UID.
   * @return {bool} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

    /**
   * @description Checks if the current user is the owner of the existing document.
   * @param {string} userId The user ID to compare against the request's auth UID.
   * @return {bool} True if the user is the owner and document exists, false otherwise.
   */
  function isExistingOwner(userId) {
      return isOwner(userId) && exists(resource.data);
  }

  /**
   * @description Checks if the current user has admin privileges.
   * @return {bool} True if the user is an admin, false otherwise.
   */
  function isAdmin() {
    return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }
}