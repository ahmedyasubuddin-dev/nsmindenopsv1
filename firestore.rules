/**
 * @file Firestore Security Rules
 * @core Philosophy: This ruleset enforces a strict authentication-based security model.
 *   All data access requires the user to be signed in. Certain collections may have open read access.
 *   Write access is generally restricted.
 * @data Structure: The database consists of several top-level collections, each representing
 *   a different type of report or data entity. There are no user-specific subcollections except under `/users/{userId}`.
 * @key Security Decisions:
 *   - Listing of user documents is disallowed.
 *   - Collections storing department reports generally have public read access but restricted write access.
 *   - Data shape validation is minimized to allow for rapid prototyping.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows users to read and write their own profile data.
     * @path /users/{userId}
     * @allow (create) User with UID "ReSdY1OX2Yb86CiBNNHWfDDOYPd2" can create a profile with ID "ReSdY1OX2Yb86CiBNNHWfDDOYPd2".
     * @allow (get) User with UID "ReSdY1OX2Yb86CiBNNHWfDDOYPd2" can read their own profile.
     * @allow (update) User with UID "ReSdY1OX2Yb86CiBNNHWfDDOYPd2" can update their own profile.
     * @allow (delete) User with UID "ReSdY1OX2Yb86CiBNNHWfDDOYPd2" can delete their own profile.
     * @deny (create) User with UID "ReSdY1OX2Yb86CiBNNHWfDDOYPd2" cannot create a profile with ID "otherUserId".
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email is string;
      allow update: if isSignedIn() && isOwner(userId) && resource != null;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Allows anyone to read Pregger reports, but restricts creation, updates, and deletion.
     * @path /pregger_reports/{docId}
     * @allow (get) Any signed-in user can read a Pregger report.
     * @allow (list) Any signed-in user can list Pregger reports.
     * @deny (create) No one can create a Pregger report.
     * @deny (update) No one can update a Pregger report.
     * @deny (delete) No one can delete a Pregger report.
     * @principle Public read access with restricted writes.
     */
    match /pregger_reports/{docId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

     /**
     * @description Allows anyone to read Tapehead entries, but restricts creation, updates, and deletion.
     * @path /tapehead_entries/{docId}
     * @allow (get) Any signed-in user can read a Tapehead entry.
     * @allow (list) Any signed-in user can list Tapehead entries.
     * @deny (create) No one can create a Tapehead entry.
     * @deny (update) No one can update a Tapehead entry.
     * @deny (delete) No one can delete a Tapehead entry.
     * @principle Public read access with restricted writes.
     */
    match /tapehead_entries/{docId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read Tapehead submissions, but restricts creation, updates, and deletion.
     * @path /tapeheads-submissions/{docId}
     * @allow (get) Any signed-in user can read a Tapehead submission.
     * @allow (list) Any signed-in user can list Tapehead submissions.
     * @deny (create) No one can create a Tapehead submission.
     * @deny (update) No one can update a Tapehead submission.
     * @deny (delete) No one can delete a Tapehead submission.
     * @principle Public read access with restricted writes.
     */
    match /tapeheads-submissions/{docId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read Tapehead reviews, but restricts creation, updates, and deletion.
     * @path /tapehead_reviews/{docId}
     * @allow (get) Any signed-in user can read a Tapehead review.
     * @allow (list) Any signed-in user can list Tapehead reviews.
     * @deny (create) No one can create a Tapehead review.
     * @deny (update) No one can update a Tapehead review.
     * @deny (delete) No one can delete a Tapehead review.
     * @principle Public read access with restricted writes.
     */
    match /tapehead_reviews/{docId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read Gantry reports, but restricts creation, updates, and deletion.
     * @path /gantry_reports/{docId}
     * @allow (get) Any signed-in user can read a Gantry report.
     * @allow (list) Any signed-in user can list Gantry reports.
     * @deny (create) No one can create a Gantry report.
     * @deny (update) No one can update a Gantry report.
     * @deny (delete) No one can delete a Gantry report.
     * @principle Public read access with restricted writes.
     */
    match /gantry_reports/{docId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read Gantry reports, but restricts creation, updates, and deletion.
     * @path /gantry-reports/{docId}
     * @allow (get) Any signed-in user can read a Gantry report.
     * @allow (list) Any signed-in user can list Gantry reports.
     * @deny (create) No one can create a Gantry report.
     * @deny (update) No one can update a Gantry report.
     * @deny (delete) No one can delete a Gantry report.
     * @principle Public read access with restricted writes.
     */
    match /gantry-reports/{docId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read Films reports, but restricts creation, updates, and deletion.
     * @path /films_reports/{docId}
     * @allow (get) Any signed-in user can read a Films report.
     * @allow (list) Any signed-in user can list Films reports.
     * @deny (create) No one can create a Films report.
     * @deny (update) No one can update a Films report.
     * @deny (delete) No one can delete a Films report.
     * @principle Public read access with restricted writes.
     */
    match /films_reports/{docId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read Graphics tasks, but restricts creation, updates, and deletion.
     * @path /graphics_reports/{docId}
     * @allow (get) Any signed-in user can read a Graphics task.
     * @allow (list) Any signed-in user can list Graphics tasks.
     * @deny (create) No one can create a Graphics task.
     * @deny (update) No one can update a Graphics task.
     * @deny (delete) No one can delete a Graphics task.
     * @principle Public read access with restricted writes.
     */
    match /graphics_reports/{docId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read Graphics tasks, but restricts creation, updates, and deletion.
     * @path /graphics-tasks/{docId}
     * @allow (get) Any signed-in user can read a Graphics task.
     * @allow (list) Any signed-in user can list Graphics tasks.
     * @deny (create) No one can create a Graphics task.
     * @deny (update) No one can update a Graphics task.
     * @deny (delete) No one can delete a Graphics task.
     * @principle Public read access with restricted writes.
     */
    match /graphics-tasks/{docId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read QC inspections, but restricts creation, updates, and deletion.
     * @path /qc_inspections/{docId}
     * @allow (get) Any signed-in user can read a QC inspection.
     * @allow (list) Any signed-in user can list QC inspections.
     * @deny (create) No one can create a QC inspection.
     * @deny (update) No one can update a QC inspection.
     * @deny (delete) No one can delete a QC inspection.
     * @principle Public read access with restricted writes.
     */
    match /qc_inspections/{docId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read Analytics snapshots, but restricts creation, updates, and deletion.
     * @path /analytics_snapshots/{docId}
     * @allow (get) Any signed-in user can read an Analytics snapshot.
     * @allow (list) Any signed-in user can list Analytics snapshots.
     * @deny (create) No one can create an Analytics snapshot.
     * @deny (update) No one can update an Analytics snapshot.
     * @deny (delete) No one can delete an Analytics snapshot.
     * @principle Public read access with restricted writes.
     */
    match /analytics_snapshots/{docId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read Sail statuses, but restricts creation, updates, and deletion.
     * @path /sail_status/{docId}
     * @allow (get) Any signed-in user can read a Sail status.
     * @allow (list) Any signed-in user can list Sail statuses.
     * @deny (create) No one can create a Sail status.
     * @deny (update) No one can update a Sail status.
     * @deny (delete) No one can delete a Sail status.
     * @principle Public read access with restricted writes.
     */
    match /sail_status/{docId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows anyone to read OE Jobs, but restricts creation, updates, and deletion.
     * @path /jobs/{docId}
     * @allow (get) Any signed-in user can read an OE Job.
     * @allow (list) Any signed-in user can list OE Jobs.
     * @deny (create) No one can create an OE Job.
     * @deny (update) No one can update an OE Job.
     * @deny (delete) No one can delete an OE Job.
     * @principle Public read access with restricted writes.
     */
    match /jobs/{docId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

   }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}