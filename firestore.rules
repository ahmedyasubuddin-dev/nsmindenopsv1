/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access with owner-only writes for all other collections.
 *
 * Data Structure:
 * - User profiles are stored in `/users/{userId}`.
 * - All other data (reports, tasks, inspections, etc.) is stored in top-level collections
 *   like `/pregger_reports/{docId}`, `/gantry_reports/{docId}`, etc.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - All non-user collections follow a "Public Read, Owner-Only Write" pattern.
 * - For "Public Read, Owner-Only Write", an ownership field in the document schema
 *   is required to determine the author/owner.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @deny (create) Authenticated user cannot create a profile with a different user ID.
     * @allow (get, list, update, delete) Authenticated user can only access their own profile.
     * @deny (get, list, update, delete) Authenticated user cannot access other user profiles.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.email == request.auth.token.email;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to Pregger Report documents.
     * @path /pregger_reports/{docId}
     * @allow (get, list) Anyone can read Pregger reports.
     * @allow (create) Authenticated user can create a Pregger report.
     * @deny (create) If not authenticated or ownership validation fails
     * @allow (update, delete) Authenticated user can update/delete a Pregger report if they are the owner.
     * @deny (update, delete) If not authenticated or not the owner
     * @principle Public read, owner-only write.
     */
    match /pregger_reports/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Tapehead Entry documents.
     * @path /tapeheads_submissions/{docId}
     * @allow (get, list) Anyone can read Tapehead entries.
     * @allow (create) Authenticated user can create a Tapehead entry.
     * @deny (create) If not authenticated or ownership validation fails
     * @allow (update, delete) Authenticated user can update/delete a Tapehead entry if they are the owner.
     * @deny (update, delete) If not authenticated or not the owner
     * @principle Public read, owner-only write.
     */
    match /tapeheads_submissions/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Tapehead Review documents.
     * @path /tapehead_reviews/{docId}
     * @allow (get, list) Anyone can read Tapehead reviews.
     * @allow (create) Authenticated user can create a Tapehead review.
     * @deny (create) If not authenticated or ownership validation fails
     * @allow (update, delete) Authenticated user can update/delete a Tapehead review if they are the owner.
     * @deny (update, delete) If not authenticated or not the owner
     * @principle Public read, owner-only write.
     */
    match /tapehead_reviews/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Gantry Report documents.
     * @path /gantry_reports/{docId}
     * @allow (get, list) Anyone can read Gantry reports.
     * @allow (create) Authenticated user can create a Gantry report.
     * @deny (create) If not authenticated or ownership validation fails
     * @allow (update, delete) Authenticated user can update/delete a Gantry report if they are the owner.
     * @deny (update, delete) If not authenticated or not the owner
     * @principle Public read, owner-only write.
     */
    match /gantry_reports/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Films Report documents.
     * @path /films_reports/{docId}
     * @allow (get, list) Anyone can read Films reports.
     * @allow (create) Authenticated user can create a Films report.
     * @deny (create) If not authenticated or ownership validation fails
     * @allow (update, delete) Authenticated user can update/delete a Films report if they are the owner.
     * @deny (update, delete) If not authenticated or not the owner
     * @principle Public read, owner-only write.
     */
    match /films_reports/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Graphics Task documents.
     * @path /graphics_tasks/{docId}
     * @allow (get, list) Anyone can read Graphics tasks.
     * @allow (create) Authenticated user can create a Graphics task.
     * @deny (create) If not authenticated or ownership validation fails
     * @allow (update, delete) Authenticated user can update/delete a Graphics task if they are the owner.
     * @deny (update, delete) If not authenticated or not the owner
     * @principle Public read, owner-only write.
     */
    match /graphics_tasks/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to QC Inspection documents.
     * @path /qc_inspections/{docId}
     * @allow (get, list) Anyone can read QC inspections.
     * @allow (create) Authenticated user can create a QC inspection.
     * @deny (create) If not authenticated or ownership validation fails
     * @allow (update, delete) Authenticated user can update/delete a QC inspection if they are the owner.
     * @deny (update, delete) If not authenticated or not the owner
     * @principle Public read, owner-only write.
     */
    match /qc_inspections/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Analytics Snapshot documents.
     * @path /analytics_snapshots/{docId}
     * @allow (get, list) Anyone can read Analytics snapshots.
     * @allow (create) Authenticated user can create a Analytics snapshot.
     * @deny (create) If not authenticated or ownership validation fails
     * @allow (update, delete) Authenticated user can update/delete a Analytics snapshot if they are the owner.
     * @deny (update, delete) If not authenticated or not the owner
     * @principle Public read, owner-only write.
     */
    match /analytics_snapshots/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Sail Status documents.
     * @path /sail_status/{docId}
     * @allow (get, list) Anyone can read Sail status.
     * @allow (create) Authenticated user can create a Sail status.
     * @deny (create) If not authenticated or ownership validation fails
     * @allow (update, delete) Authenticated user can update/delete a Sail status if they are the owner.
     * @deny (update, delete) If not authenticated or not the owner
     * @principle Public read, owner-only write.
     */
    match /sail_status/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to OE Job documents.
     * @path /jobs/{docId}
     * @allow (get, list) Anyone can read OE Job documents.
     * @allow (create) Authenticated user can create a OE Job document.
     * @deny (create) If not authenticated or ownership validation fails
     * @allow (update, delete) Authenticated user can update/delete a OE Job document if they are the owner.
     * @deny (update, delete) If not authenticated or not the owner
     * @principle Public read, owner-only write.
     */
    match /jobs/{docId} {
      function isSignedIn() {
        return request.auth != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}