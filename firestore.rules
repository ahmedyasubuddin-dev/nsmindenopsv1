/**
 * @fileoverview Firestore Security Rules for the application.
 *
 * Core Philosophy:
 * This ruleset prioritizes security by enforcing a strict owner-only access model for user profiles
 * and read-only access for most other collections. This promotes a secure environment with a flexible data structure during prototyping.
 *
 * Data Structure:
 * - User profiles are stored in `/users/{userId}`.
 * - Other collections like `/pregger_reports`, `/gantry_reports`, etc., store departmental data.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied for the `/users` collection, preventing unauthorized access to user data.
 * - Most collections are configured for public read access to facilitate data consumption,
 *   but write access is restricted to authorized users (this will require an ownership field to be present in the data).
 * - The ruleset defaults to the most secure interpretation when ambiguities arise, ensuring data protection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Authenticated user can create their own profile.
     * @deny (create) Authenticated user cannot create a profile for another user.
     * @allow (get, list) Authenticated user can read their own profile.
     * @deny (get, list) Authenticated user cannot read another user's profile.
     * @allow (update, delete) Authenticated user can update/delete their own profile.
     * @deny (update, delete) Authenticated user cannot update/delete another user's profile.
     * @principle Enforces document ownership for all operations on user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow get: if isOwner(userId);
      allow list: if false;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to reports from the Pregger department.
     * @path /pregger_reports/{docId}
     * @allow (get, list) Any user can read Pregger reports.
     * @deny (create, update, delete) Only owners can modify Pregger reports.
     * @principle Public read access with owner-only writes.
     */
    match /pregger_reports/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'PreggerReport' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Controls access to entries from Tapehead operators.
     * @path /tapeheads_submissions/{docId}
     * @allow (get, list) Any user can read Tapehead entries.
     * @deny (create, update, delete) Only owners can modify Tapehead entries.
     * @principle Public read access with owner-only writes.
     */
    match /tapeheads_submissions/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'TapeheadEntry' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Controls access to reviews of Tapehead entries.
     * @path /tapehead_reviews/{docId}
     * @allow (get, list) Any user can read Tapehead reviews.
     * @deny (create, update, delete) Only owners can modify Tapehead reviews.
     * @principle Public read access with owner-only writes.
     */
    match /tapehead_reviews/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'TapeheadReview' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Controls access to reports from the Gantry department.
     * @path /gantry_reports/{docId}
     * @allow (get, list) Any user can read Gantry reports.
     * @deny (create, update, delete) Only owners can modify Gantry reports.
     * @principle Public read access with owner-only writes.
     */
    match /gantry_reports/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'GantryReport' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Controls access to reports from the Films department.
     * @path /films_reports/{docId}
     * @allow (get, list) Any user can read Films reports.
     * @deny (create, update, delete) Only owners can modify Films reports.
     * @principle Public read access with owner-only writes.
     */
    match /films_reports/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'FilmsReport' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Controls access to tasks for the Graphics department.
     * @path /graphics_tasks/{docId}
     * @allow (get, list) Any user can read Graphics tasks.
     * @deny (create, update, delete) Only owners can modify Graphics tasks.
     * @principle Public read access with owner-only writes.
     */
    match /graphics_tasks/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'GraphicsReport' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Controls access to QC inspection reports.
     * @path /qc_inspections/{docId}
     * @allow (get, list) Any user can read QC inspection reports.
     * @deny (create, update, delete) Only owners can modify QC inspection reports.
     * @principle Public read access with owner-only writes.
     */
    match /qc_inspections/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'QcInspection' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Controls access to aggregated analytics data.
     * @path /analytics_snapshots/{docId}
     * @allow (get, list) Any user can read analytics snapshots.
     * @deny (create, update, delete) Only owners can modify analytics snapshots.
     * @principle Public read access with owner-only writes.
     */
    match /analytics_snapshots/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'AnalyticsSnapshot' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Controls access to sail status information.
     * @path /sail_status/{docId}
     * @allow (get, list) Any user can read sail status information.
     * @deny (create, update, delete) Only owners can modify sail status information.
     * @principle Public read access with owner-only writes.
     */
    match /sail_status/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'SailStatus' entity is missing an 'ownerId' or 'authorId' field.
    }

    /**
     * @description Controls access to Order Entry job definitions.
     * @path /jobs/{docId}
     * @allow (get, list) Any user can read OE Job information.
     * @deny (create, update, delete) Only owners can modify OE Job information.
     * @principle Public read access with owner-only writes.
     */
    match /jobs/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      // CRITICAL: Cannot implement owner-only writes. The 'OeJob' entity is missing an 'ownerId' or 'authorId' field.
    }
  }
}