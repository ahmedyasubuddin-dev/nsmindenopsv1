/**
 * @file Overview
 * This ruleset enforces a role-based access control model combined with ownership for user-specific data.
 * Data is organized hierarchically, with top-level collections for core entities (jobs, departments, films reports) and subcollections for user-specific data (reports under departments).
 * Key Security Decisions:
 * - User listing is disallowed for privacy.
 * - Reports are secured based on user role and department affiliation. The `Report` documents must contain a denormalized `userId` field.
 * - Administrative privileges are granted based on the existence of a document in the `roles_admin` collection.
 *
 * To ensure proper authorization, it's critical that `Report` documents contain the `userId` and `departmentId` of the user who created them.
 * This allows for efficient security rules without requiring additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for most operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's ID matches the provided userId.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership for user-specific data.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the resource.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has admin privileges by verifying the existence of a document in the roles_admin collection.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Grants admin access based on a dedicated collection.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    /**
     * @description Allows read access to all.
     * @path N/A
     */
    function allowAllRead() {
        return true;
    }

    /**
     * @description
     * Defines the access control rules for documents in the `jobs` collection.
     * This enforces that only authorized users can create, update, or delete jobs.
     * @path /jobs/{jobId}
     * @allow (get, list) - Any user can read job data.
     * @allow (create) - NOT APPLICABLE. Update rule to allow based on auth requirements.
     * @allow (update, delete) - NOT APPLICABLE.  Update rule to allow based on auth requirements.
     * @deny (create) - Any unauthenticated user attempting to create a job.
     * @deny (update, delete) - Any unauthenticated user attempting to modify or delete a job.
     * @principle Restricts write access to authorized users, allows public read access.
     */
    match /jobs/{jobId} {
      allow get, list: if allowAllRead();
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false;  // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false;  // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Defines the access control rules for documents in the `departments` collection.
     *  Only admins can create, update, or delete departments.  All can read.
     * @path /departments/{departmentId}
     * @allow (get, list) - Any user can read department data.
     * @allow (create, update, delete) - Only admins can create, update, or delete departments.
     * @deny (create, update, delete) - Any non-admin user attempting to modify department data.
     * @principle Restricts write access to admins, allows public read access.
     */
    match /departments/{departmentId} {
      allow get, list: if allowAllRead();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description
     * Defines the access control rules for documents in the `shifts` subcollection under a specific department.
     *  Only admins can create, update, or delete shifts. All can read.
     * @path /departments/{departmentId}/shifts/{shiftId}
     * @allow (get, list) - Any user can read shift data.
     * @allow (create, update, delete) - Only admins can create, update, or delete shifts.
     * @deny (create, update, delete) - Any non-admin user attempting to modify shift data.
     * @principle Restricts write access to admins, allows public read access.
     */
    match /departments/{departmentId}/shifts/{shiftId} {
      allow get, list: if allowAllRead();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description
     * Defines the access control rules for documents in the `users` collection.
     *  Allows a user to create their own document.  Only admins can update or delete user documents.
     * @path /users/{userId}
     * @allow (get) - Any user can read user data.
     * @allow (create) - A user can create their own user document if the userId matches their auth.uid.
     * @allow (update, delete) - Only admins can update or delete user documents.
     * @deny (create) - Any user attempting to create a user document with a userId that does not match their auth.uid.
     * @deny (update, delete) - Any non-admin user attempting to modify user data.
     * @principle Restricts write access to admins, allows public read access.
     */
    match /users/{userId} {
      allow get: if allowAllRead();
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description
     * Defines the access control rules for documents in the `reports` subcollection under a specific department.
     *  Only the owner of the report or an admin can update or delete it. All can read.
     * @path /departments/{departmentId}/reports/{reportId}
     * @allow (get, list) - Any user can read report data.
     * @allow (create) - A user can create a report if the userId in the report data matches their auth.uid.
     * @allow (update, delete) - Only the owner of the report or an admin can update or delete it.
     * @deny (create) - Any user attempting to create a report with a userId that does not match their auth.uid.
     * @deny (update, delete) - Any non-admin user attempting to modify report data.
     * @principle Restricts write access to the owner of the report or an admin, allows public read access.
     */
    match /departments/{departmentId}/reports/{reportId} {
      allow get, list: if allowAllRead();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.userId) || isAdmin();
      allow delete: if isExistingOwner(resource.data.userId) || isAdmin();
    }

    /**
     * @description Grants admin privileges based on the existence of a document.
     * @path /roles_admin/{userId}
     * @allow (get, create, update, delete) - Only admins can manage admin roles.
     * @deny (get, create, update, delete) - Any non-admin user attempting to manage admin roles.
     * @principle Grants admin access based on a dedicated collection.
     */
    match /roles_admin/{userId} {
      allow get, create, update, delete: if isAdmin();
      allow list: if false;
    }

     /**
      * @description
      * Defines the access control rules for documents in the `films` collection.
      * This enforces that only authorized users can create, update, or delete films reports.
      * @path /films/{reportId}
      * @allow (get, list) - Any user can read films report data.
      * @allow (create) - NOT APPLICABLE. Update rule to allow based on auth requirements.
      * @allow (update, delete) - NOT APPLICABLE.  Update rule to allow based on auth requirements.
      * @deny (create) - Any unauthenticated user attempting to create a films report.
      * @deny (update, delete) - Any unauthenticated user attempting to modify or delete a films report.
      * @principle Restricts write access to authorized users, allows public read access.
      */
    match /films/{reportId} {
      allow get, list: if allowAllRead();
      allow create: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow update: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
      allow delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}