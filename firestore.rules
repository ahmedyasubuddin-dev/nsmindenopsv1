/**
 * @file Firestore Security Rules
 * @description This ruleset enforces role-based access control for the Shift Report Dashboard application.
 *
 * Core Philosophy:
 *  - Strict role-based authorization to protect sensitive shift report data.
 *  - Fine-grained access control based on user roles and department affiliations.
 *  - Authorization Independence: Denormalized `User.departmentId` and `User.role` within `Report` documents.
 *
 * Data Structure:
 *  - `/jobs/{jobId}`: Stores OE job information.
 *  - `/departments/{departmentId}`: Stores department information.
 *  - `/departments/{departmentId}/shifts/{shiftId}`: Stores shift information for each department.
 *  - `/users/{userId}`: Stores user information; `userId` is the document ID.
 *  - `/departments/{departmentId}/reports/{reportId}`: Stores shift reports, with `userId` and `departmentId` denormalized for authorization.
 *  - `/roles_admin/{userId}`: Indicates administrative privileges; document existence grants admin access.
 *  - `/films/{reportId}`: Stores film reports.
 *
 * Key Security Decisions:
 *  - Reports are segregated by department and user for consistent access control.
 *  - User listing is allowed for administrators only.
 *  - Global roles (e.g., admin) are managed through dedicated collections.
 *  - Denormalization of `User.departmentId` and `User.role` enables Authorization Independence.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for OE Jobs.
     * @path /jobs/{jobId}
     * @allow (read): Admins can read all jobs.
     * @allow (create): No direct job creation via client, only admin.
     * @deny (create): Non-admin user attempts to create a new job.
     * @principle Role-based access control.
     */
    match /jobs/{jobId} {
      allow get, list: if isAdmin();
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for Departments.
     * @path /departments/{departmentId}
     * @allow (get, list): Any signed-in user can read department information.
     * @allow (create): No direct department creation via client, only admin.
     * @deny (create): Non-admin user attempts to create a new department.
     * @principle Role-based access control.
     */
    match /departments/{departmentId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for Shifts within a Department.
     * @path /departments/{departmentId}/shifts/{shiftId}
     * @allow (get, list): Any signed-in user can read shift information within a department.
     * @allow (create): No direct shift creation via client, only admin.
     * @deny (create): Non-admin user attempts to create a new shift.
     * @principle Role-based access control.
     */
    match /departments/{departmentId}/shifts/{shiftId} {
      allow get, list: if isSignedIn();
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Rules for Users.
     * @path /users/{userId}
     * @allow (get): Any signed-in user can read user information.
     * @allow (create): A user can create their own record, but the ID must match their auth UID.
     * @deny (create): User attempts to create a record with an ID that doesn't match their auth UID.
     * @allow (list): Only admins can list all users.
     * @principle Ownership and role-based access control.
     */
    match /users/{userId} {
      allow get: if isSignedIn();
      allow create: if isSelfCreation(userId);
      allow update: if isOwner(userId) && resource != null;
      allow delete: if isOwner(userId) && resource != null;
      allow list: if isAdmin();
    }

    /**
     * @description Rules for Reports within a Department.
     * @path /departments/{departmentId}/reports/{reportId}
     * @allow (create): A user can create a report in their own department.
     * @allow (get, list): Users can read reports from their department.
     * @deny (create): User attempts to create a report in a different department.
     * @deny (update, delete): Non-owner attempts to modify or delete a report.
     * @principle Department-based access control.
     */
    match /departments/{departmentId}/reports/{reportId} {
      allow get, list: if isDepartmentMember(departmentId);
      allow create: if isDepartmentMember(departmentId) && request.resource.data.userId == request.auth.uid;
      allow update: if isReportOwner(reportId, departmentId) && resource != null;
      allow delete: if isReportOwner(reportId, departmentId) && resource != null;
    }

    /**
     * @description Rules for Admin Roles.
     * @path /roles_admin/{userId}
     * @allow (get): Any signed-in user can check for admin privileges.
     * @allow (create): Only admins can assign admin roles.
     * @deny (create): Non-admin user attempts to assign an admin role.
     * @allow (delete): Only admins can revoke admin roles.
     * @deny (delete): Non-admin user attempts to revoke an admin role.
     * @principle Role-based access control.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn();
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if isAdmin();
      allow list: if isAdmin();
    }

    /**
     * @description Rules for Film Reports.
     * @path /films/{reportId}
     * @allow (get, list): Any signed-in user can read film reports.
     * @allow (create): Only admins can create film reports.
     * @deny (create): Non-admin user attempts to create a film report.
     * @principle Role-based access control.
     */
    match /films/{reportId} {
      allow get, list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isSelfCreation(userId) {
        return request.auth.uid == userId && request.resource.data.id == userId;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
    }

    function isDepartmentMember(departmentId) {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.departmentId == departmentId;
    }

    function isReportOwner(reportId, departmentId) {
        return exists(/databases/$(database)/documents/departments/$(departmentId)/reports/$(reportId))
               && get(/databases/$(database)/documents/departments/$(departmentId)/reports/$(reportId)).data.userId == request.auth.uid;
    }
  }
}