/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict, role-based access control model.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Department reports and tasks are stored in top-level collections (e.g., `/pregger_reports/{docId}`).
 *
 * Key Security Decisions:
 * - Users can only read and write their own profiles.
 * - Department reports and tasks are only accessible to authenticated users.
 * - Listing of users is disallowed to prevent data leakage.
 *
 * Denormalization for Authorization:
 * - No denormalization is explicitly used in these rules, but consider adding fields like `ownerId` to documents to simplify authorization and avoid costly `get()` calls in future iterations.
 *
 * Structural Segregation:
 * - No structural segregation is implemented. All collections are top-level. Consider using subcollections for private vs. public data in the future.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123 if the document's 'id' field also contains 'user123'.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their profile at /users/user123.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - User with UID 'user456' cannot read, update, or delete the profile at /users/user123.
     * @principle Enforces document ownership for reads and writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.email is string;
      allow update: if isExistingOwner(userId) && request.resource.data.email == resource.data.email;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to Pregger reports.
     * @path /pregger_reports/{docId}
     * @allow (get, list) - Any authenticated user can read Pregger reports.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete Pregger reports.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete Pregger reports.
     * @principle Requires authentication for all writes.
     */
    match /pregger_reports/{docId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to Tapehead submissions.
     * @path /tapeheads_submissions/{docId}
     * @allow (get, list) - Any authenticated user can read Tapehead submissions.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete Tapehead submissions.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete Tapehead submissions.
     * @principle Requires authentication for all writes.
     */
    match /tapeheads_submissions/{docId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to Tapehead reviews.
     * @path /tapehead_reviews/{docId}
     * @allow (get, list) - Any authenticated user can read Tapehead reviews.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete Tapehead reviews.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete Tapehead reviews.
     * @principle Requires authentication for all writes.
     */
    match /tapehead_reviews/{docId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to Gantry reports.
     * @path /gantry_reports/{docId}
     * @allow (get, list) - Any authenticated user can read Gantry reports.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete Gantry reports.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete Gantry reports.
     * @principle Requires authentication for all writes.
     */
    match /gantry_reports/{docId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to Films reports.
     * @path /films_reports/{docId}
     * @allow (get, list) - Any authenticated user can read Films reports.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete Films reports.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete Films reports.
     * @principle Requires authentication for all writes.
     */
    match /films_reports/{docId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to Graphics tasks.
     * @path /graphics_tasks/{docId}
     * @allow (get, list) - Any authenticated user can read Graphics tasks.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete Graphics tasks.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete Graphics tasks.
     * @principle Requires authentication for all writes.
     */
    match /graphics_tasks/{docId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to QC inspections.
     * @path /qc_inspections/{docId}
     * @allow (get, list) - Any authenticated user can read QC inspections.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete QC inspections.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete QC inspections.
     * @principle Requires authentication for all writes.
     */
    match /qc_inspections/{docId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to Analytics snapshots.
     * @path /analytics_snapshots/{docId}
     * @allow (get, list) - Any authenticated user can read Analytics snapshots.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete Analytics snapshots.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete Analytics snapshots.
     * @principle Requires authentication for all writes.
     */
    match /analytics_snapshots/{docId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to Sail status.
     * @path /sail_status/{docId}
     * @allow (get, list) - Any authenticated user can read Sail status.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete Sail status.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete Sail status.
     * @principle Requires authentication for all writes.
     */
    match /sail_status/{docId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }

    /**
     * @description Controls access to OE Jobs.
     * @path /jobs/{docId}
     * @allow (get, list) - Any authenticated user can read OE Jobs.
     * @allow (create, update, delete) - Only authenticated users can create, update, or delete OE Jobs.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete OE Jobs.
     * @principle Requires authentication for all writes.
     */
    match /jobs/{docId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn();
      allow update: if isSignedIn() && resource != null;
      allow delete: if isSignedIn() && resource != null;
    }
  }

  // Helper function to determine if the user is signed in.
  function isSignedIn() {
    return request.auth != null;
  }

  // Helper function to determine if the requesting user is the owner of the document.
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  // Helper function to determine if the requesting user is the owner of the document and it exists.
  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}