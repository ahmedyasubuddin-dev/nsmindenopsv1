/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user profiles
 * and allows public read access to other collections while restricting write access to authorized users.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data, accessible only to the user themselves.
 * - /pregger-reports/{docId}: Stores Pregger reports, publicly readable but write-protected.
 * - /tapeheads-submissions/{docId}: Stores Tapehead entries, publicly readable but write-protected.
 * - /tapehead-reviews/{docId}: Stores Tapehead reviews, publicly readable but write-protected.
 * - /gantry-reports/{docId}: Stores Gantry reports, publicly readable but write-protected.
 * - /films-reports/{docId}: Stores Films reports, publicly readable but write-protected.
 * - /graphics-tasks/{docId}: Stores Graphics tasks, publicly readable but write-protected.
 * - /qc-inspections/{docId}: Stores QC inspection reports, publicly readable but write-protected.
 * - /analytics-snapshots/{docId}: Stores aggregated analytics data, publicly readable but write-protected.
 * - /sail-status/{docId}: Stores sail status information, publicly readable but write-protected.
 * - /jobs/{docId}: Stores OE job definitions, publicly readable but write-protected.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profile data.
 * - Listing the /users collection is disallowed for security reasons.
 * - All other collections are publicly readable to facilitate data consumption.
 * - Write access to non-user collections is denied to all users in this prototyping phase. In a production environment,
 *   this would be modified to grant access to specific roles or users based on application logic.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents. Users can only read and write their own profile.
     * @path /users/{userId}
     * @allow (create) - User 'ReSdY1OX2Yb86CiBNNHWfDDOYPd2' can create their profile if request.auth.uid == userId
     * @allow (get, update, delete) - User 'ReSdY1OX2Yb86CiBNNHWfDDOYPd2' can access their profile: request.auth.uid == userId
     * @deny (create, get, update, delete) - User 'AnotherUserId' cannot access 'ReSdY1OX2Yb86CiBNNHWfDDOYPd2' profile.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing users is not permitted.
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to Pregger reports.  Read is public, writes are restricted.
     * @path /pregger-reports/{docId}
     * @allow (get, list) - Any user can read Pregger reports.
     * @deny (create, update, delete) - No user can create, update, or delete Pregger reports in this prototype.
     * @principle Public read, restricted writes for Pregger reports.
     */
    match /pregger-reports/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorization logic for creating/modifying Pregger reports.
    }

    /**
     * @description Controls access to Tapehead submissions.  Read is public, writes are restricted.
     * @path /tapeheads-submissions/{docId}
     * @allow (get, list) - Any user can read Tapehead submissions.
     * @deny (create, update, delete) - No user can create, update, or delete Tapehead submissions in this prototype.
     * @principle Public read, restricted writes for Tapehead submissions.
     */
    match /tapeheads-submissions/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorization logic for creating/modifying Tapehead submissions.
    }

    /**
     * @description Controls access to Tapehead reviews.  Read is public, writes are restricted.
     * @path /tapehead-reviews/{docId}
     * @allow (get, list) - Any user can read Tapehead reviews.
     * @deny (create, update, delete) - No user can create, update, or delete Tapehead reviews in this prototype.
     * @principle Public read, restricted writes for Tapehead reviews.
     */
    match /tapehead-reviews/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorization logic for creating/modifying Tapehead reviews.
    }

    /**
     * @description Controls access to Gantry reports.  Read is public, writes are restricted.
     * @path /gantry-reports/{docId}
     * @allow (get, list) - Any user can read Gantry reports.
     * @deny (create, update, delete) - No user can create, update, or delete Gantry reports in this prototype.
     * @principle Public read, restricted writes for Gantry reports.
     */
    match /gantry-reports/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorization logic for creating/modifying Gantry reports.
    }

    /**
     * @description Controls access to Films reports.  Read is public, writes are restricted.
     * @path /films-reports/{docId}
     * @allow (get, list) - Any user can read Films reports.
     * @deny (create, update, delete) - No user can create, update, or delete Films reports in this prototype.
     * @principle Public read, restricted writes for Films reports.
     */
    match /films-reports/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorization logic for creating/modifying Films reports.
    }

    /**
     * @description Controls access to Graphics tasks.  Read is public, writes are restricted.
     * @path /graphics-tasks/{docId}
     * @allow (get, list) - Any user can read Graphics tasks.
     * @deny (create, update, delete) - No user can create, update, or delete Graphics tasks in this prototype.
     * @principle Public read, restricted writes for Graphics tasks.
     */
    match /graphics-tasks/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorization logic for creating/modifying Graphics tasks.
    }

    /**
     * @description Controls access to QC inspections.  Read is public, writes are restricted.
     * @path /qc-inspections/{docId}
     * @allow (get, list) - Any user can read QC inspections.
     * @deny (create, update, delete) - No user can create, update, or delete QC inspections in this prototype.
     * @principle Public read, restricted writes for QC inspections.
     */
    match /qc-inspections/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorization logic for creating/modifying QC inspections.
    }

    /**
     * @description Controls access to Analytics snapshots.  Read is public, writes are restricted.
     * @path /analytics-snapshots/{docId}
     * @allow (get, list) - Any user can read Analytics snapshots.
     * @deny (create, update, delete) - No user can create, update, or delete Analytics snapshots in this prototype.
     * @principle Public read, restricted writes for Analytics snapshots.
     */
    match /analytics-snapshots/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorization logic for creating/modifying Analytics snapshots.
    }

    /**
     * @description Controls access to Sail status.  Read is public, writes are restricted.
     * @path /sail-status/{docId}
     * @allow (get, list) - Any user can read Sail status.
     * @deny (create, update, delete) - No user can create, update, or delete Sail status in this prototype.
     * @principle Public read, restricted writes for Sail status.
     */
    match /sail-status/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorization logic for creating/modifying Sail status.
    }

    /**
     * @description Controls access to OE Jobs.  Read is public, writes are restricted.
     * @path /jobs/{docId}
     * @allow (get, list) - Any user can read OE Jobs.
     * @deny (create, update, delete) - No user can create, update, or delete OE Jobs in this prototype.
     * @principle Public read, restricted writes for OE Jobs.
     */
    match /jobs/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add authorization logic for creating/modifying OE Jobs.
    }
  }
}