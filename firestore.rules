/**
 * @fileoverview Firestore Security Rules for ShiftView application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user profiles and a creator-ownership model for reports and other data entries.
 * It also leverages role-based access control to restrict access to certain functionalities based on the user's role.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`.
 * - Reports from different departments (Pregger, Tapehead, Gantry, Films, Graphics) are stored in their respective collections: `/pregger_reports/{preggerReportId}`, `/tapehead_entries/{tapeheadEntryId}`, etc.
 * - Tapehead reviews are stored under `/tapehead_reviews/{tapeheadReviewId}`.
 * - QC inspections are stored under `/qc_inspections/{qcInspectionId}`.
 * - Analytics snapshots are stored under `/analytics_snapshots/{analyticsSnapshotId}`.
 * - Sail statuses are stored under `/sail_status/{sailStatusId}`.
 *
 * Key Security Decisions:
 * - Users can only read and write their own user profile.
 * - Reports and other data entries can only be created by authenticated users.
 * - Only the creator of a report or data entry can update or delete it.
 * - List operations are allowed for all collections.
 * - Data validation is minimal in this prototyping phase, focusing on ownership and relational integrity.
 *
 * Denormalization for Authorization:
 * - Each report/entry includes a `createdBy` field which is set to `request.auth.uid` on creation. This enables ownership checks without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profiles, ensuring users can only access their own profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' creates their own profile with matching userId.
     * @allow (get, update, delete) User with ID 'user123' reads/updates/deletes their own profile.
     * @deny (create) User with ID 'user123' attempts to create a profile with userId 'otherUser'.
     * @deny (get, update, delete) User with ID 'user123' attempts to read/update/delete the profile of 'otherUser'.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Manages reports submitted by the Pregger department.
     * @path /pregger_reports/{preggerReportId}
     * @allow (create) Authenticated user creates a new Pregger report.  The report includes `createdBy: request.auth.uid`.
     * @allow (get, list) Any user can read or list Pregger reports.
     * @deny (update, delete) User attempts to update/delete a Pregger report they did not create.
     * @principle Enforces creator-ownership for write operations and public read access.
     */
    match /pregger_reports/{preggerReportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Manages data entries submitted by Tapehead operators.
     * @path /tapehead_entries/{tapeheadEntryId}
     * @allow (create) Authenticated user creates a new Tapehead entry.  The report includes `createdBy: request.auth.uid`.
     * @allow (get, list) Any user can read or list Tapehead entries.
     * @deny (update, delete) User attempts to update/delete a Tapehead entry they did not create.
     * @principle Enforces creator-ownership for write operations and public read access.
     */
    match /tapehead_entries/{tapeheadEntryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Manages reviews of Tapehead entries by shift leads.
     * @path /tapehead_reviews/{tapeheadReviewId}
     * @allow (create) Authenticated user creates a new Tapehead review.
     * @allow (get, list) Any user can read or list Tapehead reviews.
     * @deny (update, delete) User attempts to update/delete a Tapehead review they did not create.
     * @principle Enforces creator-ownership for write operations and public read access.
     */
    match /tapehead_reviews/{tapeheadReviewId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.reviewedBy);
      allow delete: if isExistingOwner(resource.data.reviewedBy);
    }

    /**
     * @description Manages reports submitted by the Gantry department.
     * @path /gantry_reports/{gantryReportId}
     * @allow (create) Authenticated user creates a new Gantry report. The report includes `createdBy: request.auth.uid`.
     * @allow (get, list) Any user can read or list Gantry reports.
     * @deny (update, delete) User attempts to update/delete a Gantry report they did not create.
     * @principle Enforces creator-ownership for write operations and public read access.
     */
    match /gantry_reports/{gantryReportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Manages reports submitted by the Films department.
     * @path /films_reports/{filmsReportId}
     * @allow (create) Authenticated user creates a new Films report. The report includes `createdBy: request.auth.uid`.
     * @allow (get, list) Any user can read or list Films reports.
     * @deny (update, delete) User attempts to update/delete a Films report they did not create.
     * @principle Enforces creator-ownership for write operations and public read access.
     */
    match /films_reports/{filmsReportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Manages reports submitted by the Graphics department.
     * @path /graphics_reports/{graphicsReportId}
     * @allow (create) Authenticated user creates a new Graphics report. The report includes `createdBy: request.auth.uid`.
     * @allow (get, list) Any user can read or list Graphics reports.
     * @deny (update, delete) User attempts to update/delete a Graphics report they did not create.
     * @principle Enforces creator-ownership for write operations and public read access.
     */
    match /graphics_reports/{graphicsReportId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Manages quality control inspections.
     * @path /qc_inspections/{qcInspectionId}
     * @allow (create) Authenticated user creates a new QC inspection. The report includes `createdBy: request.auth.uid`.
     * @allow (get, list) Any user can read or list QC inspections.
     * @deny (update, delete) User attempts to update/delete a QC inspection they did not create.
     * @principle Enforces creator-ownership for write operations and public read access.
     */
    match /qc_inspections/{qcInspectionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.createdBy == request.auth.uid;
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Manages snapshots of analytics data.
     * @path /analytics_snapshots/{analyticsSnapshotId}
     * @allow (create) Authenticated user creates a new analytics snapshot.
     * @allow (get, list) Any user can read or list analytics snapshots.
     * @deny (update, delete) User attempts to update/delete an analytics snapshot they did not create.
     * @principle Enforces creator-ownership for write operations and public read access.
     */
    match /analytics_snapshots/{analyticsSnapshotId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }

    /**
     * @description Manages the status of sails.
     * @path /sail_status/{sailStatusId}
     * @allow (create) Authenticated user creates a new sail status.
     * @allow (get, list) Any user can read or list sail statuses.
     * @deny (update, delete) User attempts to update/delete a sail status they did not create.
     * @principle Enforces creator-ownership for write operations and public read access.
     */
    match /sail_status/{sailStatusId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(ownerId) {
        return request.auth != null && request.auth.uid == ownerId;
      }

      function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
      }

      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.createdBy);
      allow delete: if isExistingOwner(resource.data.createdBy);
    }
  }
}