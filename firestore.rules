/**
 * @fileoverview Firestore Security Rules for Minden.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user profiles and allows open reads for all other data collections. Writes to non-user collections are generally disallowed for the prototype phase.
 *
 * Data Structure:
 * - User profiles are stored under `/users/{userId}`, secured via ownership.
 * - All other data collections reside at the top level (e.g., `/pregger_reports/{docId}`).
 *
 * Key Security Decisions:
 * - User listing is disallowed for security reasons.
 * - Data validation is relaxed to enable rapid prototyping but will be made more strict later
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) User with matching ID can create their profile.
     * @allow (get, list, update, delete) User with matching ID can read, update, and delete their profile.
     * @deny (create) User cannot create a profile with an ID that doesn't match their own.
     * @deny (get, list, update, delete) User cannot access or modify other user's profiles.
     * @principle Enforces document ownership for user profiles.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to Pregger reports.
     * @path /pregger_reports/{docId}
     * @allow (get, list) Anyone can read Pregger reports.
     * @deny (create, update, delete) No one can create, update, or delete Pregger reports.
     * @principle Public read, owner-only writes (not implemented yet).
     */
    match /pregger_reports/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false;
      // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Tapehead submissions.
     * @path /tapeheads_submissions/{docId}
     * @allow (get, list) Anyone can read Tapehead submissions.
     * @deny (create, update, delete) No one can create, update, or delete Tapehead submissions.
     * @principle Public read, owner-only writes (not implemented yet).
     */
    match /tapeheads_submissions/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false;
      // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Tapehead reviews.
     * @path /tapehead_reviews/{docId}
     * @allow (get, list) Anyone can read Tapehead reviews.
     * @deny (create, update, delete) No one can create, update, or delete Tapehead reviews.
     * @principle Public read, owner-only writes (not implemented yet).
     */
    match /tapehead_reviews/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false;
      // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Gantry reports.
     * @path /gantry_reports/{docId}
     * @allow (get, list) Anyone can read Gantry reports.
     * @deny (create, update, delete) No one can create, update, or delete Gantry reports.
     * @principle Public read, owner-only writes (not implemented yet).
     */
    match /gantry_reports/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false;
      // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Films reports.
     * @path /films_reports/{docId}
     * @allow (get, list) Anyone can read Films reports.
     * @deny (create, update, delete) No one can create, update, or delete Films reports.
     * @principle Public read, owner-only writes (not implemented yet).
     */
    match /films_reports/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false;
      // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Graphics tasks.
     * @path /graphics_tasks/{docId}
     * @allow (get, list) Anyone can read Graphics tasks.
     * @deny (create, update, delete) No one can create, update, or delete Graphics tasks.
     * @principle Public read, owner-only writes (not implemented yet).
     */
    match /graphics_tasks/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false;
      // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to QC inspections.
     * @path /qc_inspections/{docId}
     * @allow (get, list) Anyone can read QC inspections.
     * @deny (create, update, delete) No one can create, update, or delete QC inspections.
     * @principle Public read, owner-only writes (not implemented yet).
     */
    match /qc_inspections/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false;
      // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Analytics snapshots.
     * @path /analytics_snapshots/{docId}
     * @allow (get, list) Anyone can read Analytics snapshots.
     * @deny (create, update, delete) No one can create, update, or delete Analytics snapshots.
     * @principle Public read, owner-only writes (not implemented yet).
     */
    match /analytics_snapshots/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false;
      // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to Sail status.
     * @path /sail_status/{docId}
     * @allow (get, list) Anyone can read Sail status.
     * @deny (create, update, delete) No one can create, update, or delete Sail status.
     * @principle Public read, owner-only writes (not implemented yet).
     */
    match /sail_status/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false;
      // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Controls access to OE Jobs.
     * @path /jobs/{docId}
     * @allow (get, list) Anyone can read OE Jobs.
     * @deny (create, update, delete) No one can create, update, or delete OE Jobs.
     * @principle Public read, owner-only writes (not implemented yet).
     */
    match /jobs/{docId} {
      allow get, list: if true;
      allow create, update, delete: if false;
      // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }
}