rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows reading and writing of job information.
     * @path /jobs/{jobId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isJobOwner(jobId);
     * @allow delete: if isJobOwner(jobId);
     * @principle Public read, owner-only writes.
     */
    match /jobs/{jobId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isJobOwner(jobId);
      allow delete: if isSignedIn() && isJobOwner(jobId);
    }

    /**
     * @description Allows reading and writing of department information.
     * @path /departments/{departmentId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if isSignedIn();
     * @allow update: if isDepartmentOwner(departmentId);
     * @allow delete: if isDepartmentOwner(departmentId);
     * @principle Public read, owner-only writes.
     */
    match /departments/{departmentId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isSignedIn() && isDepartmentOwner(departmentId);
      allow delete: if isSignedIn() && isDepartmentOwner(departmentId);
    }

    /**
     * @description Allows reading and writing of shift information for each department.
     * @path /departments/{departmentId}/shifts/{shiftId}
     * @allow get: if true;
     * @allow list: if true;
     * @allow create: if isDepartmentMember(departmentId);
     * @allow update: if isShiftOwner(departmentId, shiftId);
     * @allow delete: if isShiftOwner(departmentId, shiftId);
     * @principle Public read, owner-only writes.
     */
    match /departments/{departmentId}/shifts/{shiftId} {
      allow get, list: if true;
      allow create: if isSignedIn() && isDepartmentMember(departmentId);
      allow update: if isSignedIn() && isShiftOwner(departmentId, shiftId);
      allow delete: if isSignedIn() && isShiftOwner(departmentId, shiftId);
    }

    /**
     * @description Allows users to read their own profile and create their profile if the userId matches their auth.uid.  No listing allowed.
     * @path /users/{userId}
     * @allow get: if isOwner(userId);
     * @allow list: if false;
     * @allow create: if request.auth.uid == userId;
     * @allow update: if isOwner(userId);
     * @allow delete: if isOwner(userId);
     * @principle Enforces document ownership for reads and writes, allows self-creation.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Allows users to read, create, update, and delete reports within their department.
     * @path /departments/{departmentId}/reports/{reportId}
     * @allow get: if isDepartmentMember(departmentId);
     * @allow list: if isDepartmentMember(departmentId);
     * @allow create: if isDepartmentMember(departmentId);
     * @allow update: if isReportOwner(departmentId, reportId);
     * @allow delete: if isReportOwner(departmentId, reportId);
     * @principle Restricts access to reports based on department membership.
     */
    match /departments/{departmentId}/reports/{reportId} {
      allow get: if isSignedIn() && isDepartmentMember(departmentId);
      allow list: if isSignedIn() && isDepartmentMember(departmentId);
      allow create: if isSignedIn() && isDepartmentMember(departmentId);
      allow update: if isSignedIn() && isReportOwner(departmentId, reportId);
      allow delete: if isSignedIn() && isReportOwner(departmentId, reportId);
    }

    /**
     * @description Allows admins to read, create, update, and delete roles within their department.
     * @path /roles_admin/{userId}
     * @allow get: if isAdmin();
     * @allow list: if isAdmin();
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @principle Restricts access to reports based on admin status.
     */
    match /roles_admin/{userId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }
      /**
       * @description Allows reading and writing of film reports.
       * @path /films/{reportId}
       * @allow get: if true;
       * @allow list: if true;
       * @allow create: if isSignedIn();
       * @allow update: if isFilmOwner(reportId);
       * @allow delete: if isFilmOwner(reportId);
       * @principle Public read, owner-only writes.
       */
      match /films/{reportId} {
          allow get, list: if true;
          allow create: if isSignedIn();
          allow update: if isSignedIn() && isFilmOwner(reportId);
          allow delete: if isSignedIn() && isFilmOwner(reportId);
      }
  }

  // Helper functions

  /**
   * @description Checks if the user is signed in.
   * @return {boolean} True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the user is the owner of the document.
   * @param {string} userId The user ID to check against.
   * @return {boolean} True if the user is the owner, false otherwise.
   */
  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  /**
   * @description Checks if the user is the owner of the existing document.
   * @param {string} userId The user ID to check against.
   * @return {boolean} True if the user is the owner and the document exists, false otherwise.
   */
  function isExistingOwner(userId) {
    return isSignedIn() && resource.data.userId == userId;
  }
    /**
     * @description Checks if the user is a member of the department.
     * @param {string} departmentId The department ID to check against.
     * @return {boolean} True if the user is a member of the department, false otherwise.
     */
  function isDepartmentMember(departmentId) {
    return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.departmentId == departmentId;
  }

    /**
     * @description Checks if the user has the admin role.
     * @return {boolean} True if the user has the admin role, false otherwise.
     */
  function isAdmin() {
        return exists(/databases/$(database)/documents/roles_admin/$(request.auth.uid));
  }

    /**
     * @description Checks if the user is the owner of the job.
     * @param {string} jobId The job ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
  function isJobOwner(jobId) {
    return get(/databases/$(database)/documents/jobs/$(jobId)).data.ownerId == request.auth.uid;
  }

    /**
     * @description Checks if the user is the owner of the department.
     * @param {string} departmentId The department ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
  function isDepartmentOwner(departmentId) {
    return get(/databases/$(database)/documents/departments/$(departmentId)).data.ownerId == request.auth.uid;
  }

    /**
     * @description Checks if the user is the owner of the shift.
     * @param {string} departmentId The department ID to check against.
     * @param {string} shiftId The shift ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
  function isShiftOwner(departmentId, shiftId) {
    return get(/databases/$(database)/documents/departments/$(departmentId)/shifts/$(shiftId)).data.ownerId == request.auth.uid;
  }

    /**
     * @description Checks if the user is the owner of the report.
     * @param {string} departmentId The department ID to check against.
     * @param {string} reportId The report ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
  function isReportOwner(departmentId, reportId) {
    return get(/databases/$(database)/documents/departments/$(departmentId)/reports/$(reportId)).data.ownerId == request.auth.uid;
  }

    /**
     * @description Checks if the user is the owner of the film report.
     * @param {string} filmId The film ID to check against.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
  function isFilmOwner(filmId) {
    return get(/databases/$(database)/documents/films/$(filmId)).data.ownerId == request.auth.uid;
  }
}